<!-- TODO: Complete documentation for this part -->
<!-- TODO: Delete seat types -->
<!-- TODO: Delete student helper -->
<!-- TODO: Rollback sequelize transaction on error -->
<!-- TODO: Drag and select seats for helpers -->

<%- include('../templates/head')-%>

<body>
    <%- include('../templates/navbar')-%>
    <div class="container"> <!-- Always enclose everything in a container  -->
        <main role="main" class="inner cover"> <!-- Idk what this element does but every tutorial uses it so eh might as well use it  -->
            <div class="mt-6"></div> <!-- Used for spacing between sections  -->
            <!-- Event details form section  -->
            <!-- Heading  -->
            <h2 class="section-heading">Event Details</h2>
            <div class="mt-3"></div>
            <!-- Content  -->
            <form id="editEventForm" action="/" method="post">
                <div class="row"> <!-- BTW, rows are used to create responsive columns but I'm guessing yall already know that. But if you don't, better learn the bootstrap grid system cause we're gonna use it a lot.  -->
                    <!-- Event Name Input Card  -->
                    <div class="col-sm-6">
                        <div class="card input-card mt-3"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="eventNameInput" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle mb-2 text-secondary font-weight-normal">Event Name</small> <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <input id="eventNameInput" name="eventNameInput" class="form-control card-input" type="text" value="<%= event.name %>" placeholder="e.g. Dance Competition"> <!-- Note that the name attribute is required to get textbox values from the backend. It should have the same value as the id.  --> 
                            </div>
                        </div>
                    </div>
                    <!-- Event Start Date / Time Input Card  -->
                    <div class="col-sm-6">
                        <div class="card input-card mt-3"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="eventDateTimeInput" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle mb-2 text-secondary font-weight-normal">Event Date / Time</small> <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <input id="eventDateTimeInput" name="eventDateTimeInput" class="form-control card-input" type="datetime-local" value="<%= moment(event.startDateTime).format('YYYY-MM-DDTkk:mm') %>" placeholder="e.g 13th March 2021, 9am" required> <!-- This is where the user actually inputs all their stuff  -->
                            </div>
                        </div>
                    </div>
                    <!-- Max. No. of Seats Input Card  -->
                    <div class="col-sm-6">
                        <div class="card input-card mt-3"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="maxSeatsPerReservationInput" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle mb-2 text-secondary font-weight-normal">Maximum no. of seats per reservation</small> <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <input id="maxSeatsPerReservationInput" name="maxSeatsPerReservationInput" class="form-control card-input" type="number" value="<%= event.seatsPerReservation %>" min="1" max="10" placeholder="No Limit">
                            </div>
                        </div>
                    </div>
                    <!-- Checkmark (check) Input Card w/o Label  -->
                    <div class="col-sm-6">
                        <div class="card input-card mt-3">
                            <div class="card-body no-label-card-body">
                                <div id="prioritiseBackCheck">
                                    <div class="form-check form-check-inline ml-2">
                                        <input id="prioritiseBackCheck" name="prioritiseBackCheck"  class="form-check-input lg-check" type="checkbox" value="true" <%= event.prioritiseBackRows ? "checked" : "" %>>
                                        <label class="form-check-label px-3" for="prioritiseBackCheck">
                                            Prioritise seats at the back
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="mt-6"></div> <!-- Used for spacing between sections  -->
                <!-- Seat chart card section  -->
                <!-- Heading  -->
                <h2 class="section-heading">Seat Chart</h2>
                <div class="mt-3"></div> <!-- Used for spacing between section heading and content  -->
                <!-- Content  -->
                <div class="row">
                    <!-- Venues Select Input Card  -->
                    <div class="col-sm-6">
                        <div class="card input-card mt-3"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="venueSelectInput" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle mb-2 text-secondary font-weight-normal">Venue</small> <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <select id="venueSelectInput" name="venueSelectInput" class="form-control card-input" tabindex="0"> <!-- This is where the user actually inputs all their stuff  -->
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="seatChartCard" class="card mt-3"> <!-- Put interactible elements in a card, enclosed with card-body  -->
                    <div class="card-body">
                        <div id="tableWrapper" class="seatCharts-wrapper"> <!-- Seat maps should be ensclosed in a seat chart wrapper -->
                            <div id="seatMap" class="seatCharts-container"> <!-- This is the element the seat chart is gonna latch itself onto -->
                                <div class="front-indicator">Front</div> <!-- The seat chart element should also contain the front indicator so the user knows the orientation of the map -->
                            </div>
                        </div>
                    </div>
                </div>
                <div class="seatCharts-legend row">
                    <!-- Add Seat Type Card -->
                    <!-- This card will always be fixed in front of all the other legend cards -->
                    <div id="addSeatTypeCol" class="seatCharts-cardColumn col-md-3">
                        <div id="addSeatTypeCard" class="seatCharts-legendCard card card-hover text-primary font-weight-medium py-2 px-4 mt-3 clickable-div">
                            <div class="seatCharts-cardBody card-body">
                                <div id="addSeatContent" class="seatCharts-legendItem text-center text-truncate">
                                    <span class="seatCharts-legendDescription">
                                        <i class="fas fa-plus"></i>&nbsp;&nbsp;Add Seat Type
                                    </span>
                                </div>
                            </div>
                            <a href="#addSeatTypeModal" class="stretched-link" data-toggle="modal" data-target="#addSeatTypeModal"></a> <!-- On pressing this card, the add seat type button will show up -->
                        </div>
                    </div>
                    <div class="col-md-9">
                        <div id="editMapLegend" class="row px-0">
                        </div>
                        <div class="mt-3"></div>
                        <span class="text-muted font-weight-light">To edit the seat chart, click on any of the seat types below and select a seat in the map to replace it with your selection.</span>
                    </div>
                </div>
                <div class="mt-6"></div> <!-- Used for spacing between sections  -->
                <!-- Helpers input section  -->
                <!-- Heading  -->
                <h2 class="section-heading">Student Helpers</h2>
                <div class="mt-4"></div> <!-- Used for spacing between section heading and content  -->
                <div class="row">
                    <!-- Helper Select Input Card  -->
                    <div class="col-sm-6 border-right border-secondary">
                        <div class="card input-card mb-3"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="helperSelectInput" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle mb-2 text-secondary font-weight-normal">Student Helpers</small> <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <select id="helperSelectInput" name="helperSelectInput" class="form-control card-input" tabindex="0"> <!-- This is where the user actually inputs all their stuff  -->
                                    <option selected="true" disabled="disabled">Choose Helper</option> 
                                </select>
                            </div>
                        </div>
                    </div>
                    <div id="helpersCardCol" class="col-sm-6">
                    </div>
                </div>
                <div class="mt-6"></div> <!-- Used for spacing between sections  -->
                <div class="row">
                    <div class="col-sm-6">
                        <button id="deleteEventButton" class="btn btn-danger btn-lg w-100" href="/api/delete-venue/<%= event.id %>" type="button">Delete Event</button>
                    </div>
                    <div class="col-sm-6">
                        <button id="updateEventButton" class="btn btn-primary btn-lg w-100" type="submit">Save Changes</button>
                    </div>
                </div>
            </form>
        </main>
    </div>

    <div id="addSeatTypeModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="addSeatTypeModal" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <!-- This is where you enter the title of the modal -->
                <div class="modal-header">
                    <h4 class="modal-title text-primary" id="addSeatTypeModalLabel">Add Seat Type</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <!-- This is the actual content (can put anything here) -->
                <div class="modal-body">
                    <div class="card input-card"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                        <div class="card-body input-card-body">
                            <label for="seatTypeNameInput" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                <small class="card-subtitle mb-2 text-secondary font-weight-normal">Name</small> <!-- The small element is where we actually write down what the input does  -->
                            </label>
                            <input id="seatTypeNameInput" name="seatTypeNameInput" class="form-control card-input" type="text" placeholder="e.g. Handicapped"> <!-- This is where the user actually inputs all their stuff  -->
                        </div>
                    </div>
                    <div class="card input-card mt-3">
                        <div class="card-body no-label-card-body">
                            <div id="blockSeatTypeCheckForm">
                                <div class="form-check form-check-inline ml-2">
                                    <input id="blockSeatTypeCheck" name="blockSeatTypeCheck"  class="form-check-input lg-check" type="checkbox" value="true">
                                    <label class="form-check-label px-3" for="blockSeatTypeCheck">
                                        Block helpers from reserving this seat type
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- This is the footer, where you usually put buttons and stuff -->
                <div class="modal-footer">
                    <button id="addSeatTypeButton" class="btn btn-primary btn-lg w-100" type="button">Confirm</button>
                </div>
            </div>
        </div>
    </div>
</body>

<script>
    const eventId = <%= event.id %>;

    // Declare all the ids of the various html elements we're gonna manipulate as variables so referencing them in js is easier
    const editEventForm = '#editEventForm';
    const eventNameInput = '#eventNameInput';
    const eventDateTimeInput = '#eventDateTimeInput';
    const maxSeatsPerReservationInput = '#maxSeatsPerReservationInput';
    const prioritiseBackCheck = '#prioritiseBackCheck';
    const venueSelectInput = '#venueSelectInput';
    const tableWrapper = '#tableWrapper';
    const seatMap = '#seatMap';
    const legend = '#editMapLegend';
    const addSeatTypeCard = '#addSeatTypeCard';
    const helperSelectInput = '#helperSelectInput';
    const helpersCardCol = '#helpersCardCol';
    const deleteEventButton = '#deleteEventButton';
    const updateEventButton = '#updateEventButton';
    const addSeatTypeModal = '#addSeatTypeModal';
    const seatTypeNameInput = '#seatTypeNameInput';
    const blockSeatTypeCheck = '#blockSeatTypeCheck';
    const addSeatTypeButton = '#addSeatTypeButton';

    const selectableLegendClasses = 'card-hover text-primary font-weight-medium py-2 px-1';

    let availableSeatCharacters = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","v","w","x","y","z"];

    let selectedSeatType; // This variable will contain the character of the seat type we've selected

    let event;
    let venues;
    let helpers;

    // Seat chart configuration
    let sc = {};

    sc.map = [];

    sc.seats = {};

    sc.naming = {
        rows: ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','AA','BB','CC','DD','EE', 'FF','GG','HH','JJ','KK','LL','MM','NN','OO'],
        getLabel: function (character, row, column) {
            return row + ':' + column;
        },
        getId: function (character, row, column) {
            return row + ':' + column;
        }
    };

    sc.legend = {
        node: $(legend),
        items: []				
    };

    sc.click = function () {
        if (sc.hasOwnProperty('map') && sc.hasOwnProperty('seats')) {
            replaceMapSeat(sc.map, this, selectedSeatType, sc.seats[selectedSeatType]);
        }
    };

    $(document).ready(async function() {
        try {
            event = await getEventDetails(eventId);
            venues = await getAllVenues();
            helpers = await getAllHelpers();

            // at least a single venue is required to create an event, so throw error if it doesn't exists
            if (venues.length < 1) {
                throwException("There are no venues available! Please contact the admin to create a venue.");
            }
        } catch (error) {
            return handleError(error);
        }
        
        for (i = 0; i < helpers.length; i++) {
            for (r = 0; r < event.helpers.length; r++) {
                helpers[i].selected = (helpers[i].id === event.helpers[r].id || helpers[i].selected === true);
            }
        }

        populateHelperSelect(helpers, helperSelectInput);
        populateSelectedHelperColumn(helpers, helpersCardCol);
        populateVenueSelect(venues, venueSelectInput);

        for (i = 0; i < venues.length; i++) {
            if (venues[i].id === event.venueId) {
                $(venueSelectInput).val(i);
                break;
            }
        }
        
        sc.map = event.seatMap;
        sc.seats = getSeatsObject(event.seatTypes);
        sc.legend.items = getLegendArray(sc.seats);
        
        // Bind map
        bindMap(sc, seatMap);
        scaleContentWidth(tableWrapper, seatMap); // This function is used to scale the entire seat chart to fit within the card's dimensions when the seat chart is first created
    });

    $(window).on('resize', function() { // Upon resizing the browser window, the scaling function is called to make sure the seat chart fits within the new dimensions of the parent container
        scaleContentWidth(tableWrapper, seatMap);
    });

    $(venueSelectInput).on('change', function() {
        sc.map = JSON.parse(getSelectedVenue(venues, venueSelectInput).seatMap);
        reloadMap(sc, tableWrapper, seatMap, legend);
    });

    $(helperSelectInput).on('change', function() {
        getSelectedHelper(helpers, helperSelectInput).selected = true;
        populateHelperSelect(helpers, helperSelectInput);
        populateSelectedHelperColumn(helpers, helpersCardCol);
    });

    $(addSeatTypeButton).click(function () {
        if (availableSeatCharacters.length < 1) {
            return showDangerToast("You cannot add anymore seat types! Please delete some if you want to add more.");
        }
        
        const seatName = $(seatTypeNameInput).val();
        const seatIsBlocked = $(blockSeatTypeCheck).is(':checked');
        const seatCharacter = availableSeatCharacters[0];
        const legendCategory = seatName + ((seatIsBlocked) ? " (Blocked)" : "");

        if (seatName === "") {
            return showDangerToast("Please enter a seat name!");
        }

        if (seatCharacter.length != 1) {
            throwException("The string for the seat's character is not a single length character!")
        }

        sc.seats[seatCharacter] = {
            category: seatName,
            blocked: seatIsBlocked,
            classes: seatCharacter,
        };

        availableSeatCharacters.shift(); // Deletes the first element in available seat characters as it's already taken
        sc.legend.items.push([seatCharacter, "available", legendCategory, selectableLegendClasses]); // Pushes a new legend to the legend items that will be shown upon reload
        reloadMap(sc, tableWrapper, seatMap, legend);
        
        $(addSeatTypeModal).modal('hide'); // Hides the modal
        $(seatTypeNameInput).val(''); // Reset input to default state
        $(blockSeatTypeCheck).prop('checked', false);
    });

    $(document).on("click", `.seatCharts-legendCard:not(${addSeatTypeCard})`, function() {
        const seatCharAttr = $(this).attr("data-seat-character");
        if (typeof seatCharAttr !== typeof undefined && seatCharAttr !== false) {
            const highlighted = toggleHighlight(this, ".seatCharts-legendCard");
            selectedSeatType = (highlighted === true) ? seatCharAttr : null;
        } else {
            $(this).removeClass("highlighted");
        }
    });

    $(deleteEventButton).click(function (event) {
        const check = confirm("Are you sure you want to delete this event?");
        if (check == true) {
            window.location.replace(`/api/delete-event/${event.id}`);
        }
    });

    $(editEventForm).submit(async function (e) {
        e.preventDefault();
        $(updateEventButton).prop('disabled', true);

        try {
            const updatedEvent = await updateEvent(
                event.id,
                $(eventNameInput).val(),
                sc.map,
                $(eventDateTimeInput).val(),
                $(maxSeatsPerReservationInput).val(),
                $(prioritiseBackCheck).is(':checked'),
                getSelectedVenue(venues, venueSelectInput).id
            );
            
            const seatTypeArray = getSeatTypeArray(sc.seats, event.id);
            const eventHelperArray = getSelectedEventHelperArray(helpers, event.id);

            await updateEventSeatTypes(event.id, seatTypeArray);
            await updateEventHelpers(event.id, eventHelperArray);
            
            showSuccessToast("Event has been updated successfully!");
        } catch (error) {
            handleError(error);
        } finally {
            $(updateEventButton).prop('disabled', false);
        }
    });

    $(window).on('beforeunload', function() {
        return confirm();
    });

    getLegendArray = (seats) => {
        return Object.keys(seats).map((char) => [char, "available", seats[char].category.concat((seats[char].blocked) ? " (Blocked)" : ""), selectableLegendClasses]);
    }

    removeTakenSeatChars = (seats) => {
        for ()
        return Object.keys(seats).map((char) => [char, "available", seats[char].category.concat((seats[char].blocked) ? " (Blocked)" : ""), selectableLegendClasses]);
    }
</script>

<%- include('../templates/footer')-%>