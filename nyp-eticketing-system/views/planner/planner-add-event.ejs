<!-- TODO: Complete documentation for this part -->
<!-- TODO: Delete seat types -->
<!-- TODO: Delete student helper -->
<!-- TODO: Drag and select seats for helpers -->
<!-- TODO: Pagination -->

<%- include('../templates/head')-%>

<body>
    <%- include('../templates/navbar')-%>
    <div class="container"> <!-- Always enclose everything in a container  -->
        <main role="main" class="inner cover"> <!-- Idk what this element does but every tutorial uses it so eh might as well use it  -->
            <div class="mt-6"></div> <!-- Used for spacing between sections  -->
            <!-- Event details form section  -->
            <!-- Heading  -->
            <h2 class="section-heading">Event Details</h2>
            <div class="mt-3"></div>
            <!-- Content  -->
            <form id="addEventForm" action="/" method="post">
                <div class="row"> <!-- BTW, rows are used to create responsive columns but I'm guessing yall already know that. But if you don't, better learn the bootstrap grid system cause we're gonna use it a lot.  -->
                    <!-- Event Name Input Card  -->
                    <div class="col-sm-6">
                        <div class="card input-card mt-3"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="eventNameInput" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle mb-2 text-secondary font-weight-normal">Event Name</small> <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <input id="eventNameInput" name="eventNameInput" class="form-control card-input" type="text" placeholder="e.g. Dance Competition" > <!-- Note that the name attribute is   to get textbox values from the backend. It should have the same value as the id.  --> 
                            </div>
                        </div>
                    </div>
                    <!-- Event Start Date / Time Input Card  -->
                    <div class="col-sm-6">
                        <div class="card input-card mt-3"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="eventDateTimeInput" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle mb-2 text-secondary font-weight-normal">Event Date / Time</small> <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <input id="eventDateTimeInput" name="eventDateTimeInput" class="form-control card-input" type="datetime-local" placeholder="e.g 13th March 2021, 9am" > <!-- This is where the user actually inputs all their stuff  -->
                            </div>
                        </div>
                    </div>
                    <!-- Max. No. of Seats Input Card  -->
                    <div class="col-sm-6">
                        <div class="card input-card mt-3"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="maxSeatsPerReservationInput" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle mb-2 text-secondary font-weight-normal">Maximum no. of seats per reservation</small> <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <input id="maxSeatsPerReservationInput" name="maxSeatsPerReservationInput" class="form-control card-input" type="number" min="1" max="10" placeholder="No Limit">
                            </div>
                        </div>
                    </div>
                    <!-- Checkmark (check) Input Card w/o Label  -->
                    <div class="col-sm-6">
                        <div class="card input-card mt-3">
                            <div class="card-body no-label-card-body">
                                <div class="form-check form-check-inline ml-2">
                                    <input id="prioritiseBackCheck" name="prioritiseBackCheck"  class="form-check-input lg-check" type="checkbox" value="true">
                                    <label class="form-check-label px-3" for="prioritiseBackCheck">
                                        Prioritise seats at the back
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="mt-6"></div> <!-- Used for spacing between sections  -->
                <!-- Seat chart card section  -->
                <!-- Heading  -->
                <h2 class="section-heading">Seat Chart</h2>
                <div class="mt-3"></div> <!-- Used for spacing between section heading and content  -->
                <!-- Content  -->
                <div class="row">
                    <!-- Venues Select Input Card  -->
                    <div class="col-sm-6">
                        <div class="card input-card mt-3"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="venueSelectInput" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle mb-2 text-secondary font-weight-normal">Venue</small> <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <select id="venueSelectInput" name="venueSelectInput" class="form-control card-input" tabindex="0"> <!-- This is where the user actually inputs all their stuff  -->
                                </select>
                            </div>
                        </div>
                    </div>
                </div>

                <div id="seatChartCard" class="card mt-3"> <!-- Put interactible elements in a card, enclosed with card-body  -->
                    <div class="card-body">
                        <div id="tableWrapper" class="seatCharts-wrapper"> <!-- Seat maps should be ensclosed in a seat chart wrapper -->
                            <div id="seatMap" class="seatCharts-container"> <!-- This is the element the seat chart is gonna latch itself onto -->
                                <div class="front-indicator">Front</div> <!-- The seat chart element should also contain the front indicator so the user knows the orientation of the map -->
                            </div>
                        </div>
                    </div>
                </div>
                <div class="seatCharts-legend row">
                    <!-- Add Seat Type Card -->
                    <!-- This card will always be fixed in front of all the other legend cards -->
                    <div id="addSeatTypeCol" class="seatCharts-cardColumn col-md-3">
                        <div id="addSeatTypeCard" class="seatCharts-legendCard card card-hover text-primary font-weight-medium py-2 px-4 mt-3 clickable-div">
                            <div class="seatCharts-cardBody card-body">
                                <div id="addSeatContent" class="seatCharts-legendItem text-center text-truncate">
                                    <span class="seatCharts-legendDescription">
                                        <i class="fas fa-plus"></i>&nbsp;&nbsp;Add Seat Type
                                    </span>
                                </div>
                            </div>
                            <a href="#addSeatTypeModal" class="stretched-link" data-toggle="modal" data-target="#addSeatTypeModal"></a> <!-- On pressing this card, the add seat type button will show up -->
                        </div>
                    </div>
                    <div class="col-md-9">
                        <div id="editMapLegend" class="row px-0">
                        </div>
                        <div class="mt-3"></div>
                        <span class="text-muted font-weight-light">To edit the seat chart, click on any of the seat types above and select a seat in the map to replace it with your selection.</span>
                    </div>
                </div>
                <div class="mt-6"></div> <!-- Used for spacing between sections  -->
                <!-- Helpers input section  -->
                <!-- Heading  -->
                <h2 class="section-heading">Student Helpers</h2>
                <div class="mt-4"></div> <!-- Used for spacing between section heading and content  -->
                <div class="row">
                    <!-- Helper Select Input Card  -->
                    <div class="col-sm-6 border-right border-secondary">
                        <div class="card input-card mb-3"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="helperSelectInput" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle mb-2 text-secondary font-weight-normal">Helpers</small> <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <select id="helperSelectInput" name="helperSelectInput" class="form-control card-input" tabindex="0"> <!-- This is where the user actually inputs all their stuff  -->
                                    <option selected="true" disabled="disabled">Choose Helper</option> 
                                </select>
                            </div>
                        </div>
                    </div>
                    <div id="helpersCardCol" class="col-sm-6">
                    </div>
                </div>
                <div class="mt-6"></div> <!-- Used for spacing between sections  -->
                <button id="createEventButton" class="btn btn-primary btn-lg w-100" type="submit">Create Event</button>
            </form>
        </main>
    </div>

    <div id="addSeatTypeModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="addSeatTypeModal" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <!-- This is where you enter the title of the modal -->
                <div class="modal-header">
                    <h4 class="modal-title text-primary" id="addSeatTypeModalLabel">Add Seat Type</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <!-- This is the actual content (can put anything here) -->
                <div class="modal-body">
                    <div class="card input-card"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                        <div class="card-body input-card-body">
                            <label for="seatTypeNameInput" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                <small class="card-subtitle mb-2 text-secondary font-weight-normal">Name</small> <!-- The small element is where we actually write down what the input does  -->
                            </label>
                            <input id="seatTypeNameInput" name="seatTypeNameInput" class="form-control card-input" type="text" placeholder="e.g. Handicapped"> <!-- This is where the user actually inputs all their stuff  -->
                        </div>
                    </div>
                    <div class="card input-card mt-3">
                        <div class="card-body no-label-card-body">
                            <div id="blockSeatTypeCheckForm">
                                <div class="form-check form-check-inline ml-2">
                                    <input id="blockSeatTypeCheck" name="blockSeatTypeCheck"  class="form-check-input lg-check" type="checkbox" value="true">
                                    <label class="form-check-label px-3" for="blockSeatTypeCheck">
                                        Block helpers from reserving this seat type
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- This is the footer, where you usually put buttons and stuff -->
                <div class="modal-footer">
                    <button id="addSeatTypeButton" class="btn btn-primary btn-lg w-100" type="button">Confirm</button>
                </div>
            </div>
        </div>
    </div>
</body>

<script>
    // Declare all the ids of the various html elements we're gonna manipulate as variables so referencing them in js is easier
    const addEventForm = '#addEventForm';
    const eventNameInput = '#eventNameInput';
    const eventDateTimeInput = '#eventDateTimeInput';
    const maxSeatsPerReservationInput = '#maxSeatsPerReservationInput';
    const prioritiseBackCheck = '#prioritiseBackCheck';
    const venueSelectInput = '#venueSelectInput';
    const mapWrapper = '#tableWrapper';
    const seatMap = '#seatMap';
    const legend = '#editMapLegend';
    const addSeatTypeCard = '#addSeatTypeCard';
    const helperSelectInput = '#helperSelectInput';
    const helpersCardCol = '#helpersCardCol';
    const createEventButton = '#createEventButton';
    const addSeatTypeModal = '#addSeatTypeModal';
    const seatTypeNameInput = '#seatTypeNameInput';
    const blockSeatTypeCheck = '#blockSeatTypeCheck';
    const addSeatTypeButton = '#addSeatTypeButton';

    const selectableLegendClasses = 'text-primary clickable-div card-hover font-weight-medium'; // These are the css class belonging to legends that can be clicked on by the user

    let availableSeatCharacters = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","v","w","x","y","z"];

    const defaultSeatType = new SeatType({ char: 'G', category: 'General', blocked: false, classes: 'general' });
    const handicappedSeatType = new SeatType({ char: 'H', category: 'Handicapped', blocked: false, classes: 'handicapped' });
    let selectedSeatType = defaultSeatType.char; // This variable will contain the character of the seat type we've selected

    let venues = [];
    let helpers = [];

    let sc = new SeatChart({
        map: [],
        seatTypes: [
            defaultSeatType,
            handicappedSeatType
        ],
        legends: [],
        rowLabels: SeatChart.alphabeticalLabels(),
        columnLabels: SeatChart.undefinedLabels(),
        mapNode: seatMap,
        wrapperNode: mapWrapper,
        legendNode: legend,
    });

    sc.onClick = function () {
        sc.replaceMapSeat(this, (selectedSeatType === this.settings.character) ? defaultSeatType.char : selectedSeatType);
    };

    $(document).ready(async function() {
        try {
            venues = (await ajax.get(routes.planner.venues)).map(venue => Venue.parseApiResult(venue));
            helpers = (await ajax.get(routes.planner.helpers)).map((helper) => {
                helper = EventHelper.parseApiResult(helper);
                helper.selected = false;
                return helper;
            });
            
            // at least a single venue is required to create an event, so throw error if it doesn't exists
            if (venues.length < 1) {
                utils.throwException("There are no venues available! Please contact the admin to create a venue.");
            }
        } catch (error) {
            return utils.handleError(error);
        }

        Venue.populateSelect(venues, venueSelectInput);
        EventHelper.populateSelect(helpers.filter(helper => helper.selected == false), helperSelectInput);
        EventHelper.populateColumn(helpers.filter(helper => helper.selected == true), helpersCardCol);

        sc.map = Venue.selectedOption(venues, venueSelectInput).seatMap;
        sc.legends = sc.seatTypes.reduce(function(legends, seatType){
            if (seatType.char !== defaultSeatType.char){
                legends.push([seatType.char, "available", seatType.category, selectableLegendClasses]);
            }
            return legends;
        }, []);

        // Bind map
        sc.bindMap();
        sc.scaleContentWidth();
    });

    $(window).on('resize', function() { // Upon resizing the browser window, the scaling function is called to make sure the seat chart fits within the new dimensions of the parent container
        sc.scaleContentWidth();
    });

    $(venueSelectInput).on('change', function() {
        utils.addUnloadListener();

        sc.map = Venue.selectedOption(venues, venueSelectInput).seatMap;
        sc.reloadMap();
    });

    $(helperSelectInput).on('change', function() {
        utils.addUnloadListener();

        EventHelper.selectedOption(helpers, helperSelectInput).selected = true;
        EventHelper.populateSelect(helpers.filter(helper => helper.selected == false), helperSelectInput);
        EventHelper.populateColumn(helpers.filter(helper => helper.selected == true), helpersCardCol);
    });

    $(addSeatTypeButton).click(function () {
        utils.addUnloadListener();
        
        const seatName = $(seatTypeNameInput).val();
        const seatIsBlocked = $(blockSeatTypeCheck).is(':checked');

        if (availableSeatCharacters.length < 1) return toast.danger("You cannot add anymore seat types! Please delete some if you want to add more.");
        const seatCharacter = availableSeatCharacters[0];
        availableSeatCharacters.shift(); // Deletes the first element in available seat characters as it's already taken

        if (seatName === "") return toast.danger("Please enter a seat name!");
        if (seatCharacter.length != 1) utils.throwException("The string for the seat's character is not a single length character!");

        const seatType = new SeatType({ 
            char: seatCharacter, 
            category: seatName, 
            blocked: seatIsBlocked, 
            classes: seatCharacter 
        });
        
        selectedSeatType = seatType.char;
        sc.seatTypes.push(seatType);
        sc.legends.push([seatType.char, "available", seatType.category + ((seatIsBlocked) ? " (Blocked)" : ""), selectableLegendClasses]);
        sc.reloadMap();

        const legendCards = document.querySelectorAll(".seatCharts-legendCard");
        legendCards.forEach(obj => obj.classList.remove("highlighted"));
        legendCards.forEach(obj => {
            if (obj.getAttribute("data-seat-character") == seatType.char) {
                obj.classList.add("highlighted");
            }
        });
        
        $(addSeatTypeModal).modal('hide'); // Hides the modal
        $(seatTypeNameInput).val(''); // Reset input to default state
        $(blockSeatTypeCheck).prop('checked', false);
    });

    document.addEventListener('click', function (e) {
        if (e.target.classList.contains('seatCharts-legendCard')) {
            utils.addUnloadListener();

            const node = e.target;
            const seatCharAttr = node.getAttribute("data-seat-character");
            const highlighted = node.classList.contains("highlighted");

            document.querySelectorAll(".seatCharts-legendCard").forEach(obj => obj.classList.remove("highlighted"));

            if (seatCharAttr) {
                node.classList.add((highlighted) ? null : "highlighted");
                selectedSeatType = (highlighted) ? defaultSeatType.char : seatCharAttr;
            }
        }

        if (e.target.classList.contains('remove-helper')) {
            const node = e.target;
            helpers.forEach(helper => {
                if (helper.id == node.id) helper.selected = false;
            });

            EventHelper.populateSelect(helpers.filter(helper => helper.selected == false), helperSelectInput);
            EventHelper.populateColumn(helpers.filter(helper => helper.selected == true), helpersCardCol);
        }
    }, false);

    $(addEventForm).submit(async function (e) {
        e.preventDefault();
        $(createEventButton).prop('disabled', true);

        const event = new Event({
            name: $(eventNameInput).val(),
            seatMap: sc.map,
            startDateTime: $(eventDateTimeInput).val(),
            seatsPerReservation: $(maxSeatsPerReservationInput).val(),
            prioritiseBackRows: $(prioritiseBackCheck).is(':checked'),
            venue: Venue.selectedOption(venues, venueSelectInput),
            seatTypes: sc.seatTypes,
            helpers: helpers.filter(helper => helper.selected == true)
        });

        try {
            await ajax.post(routes.planner.events, event.convertToApiFormat());
            await ajax.post(routes.index.successFlash, "A new event has been created successfully!");

            utils.removeUnloadListener();
            
            window.location.replace("/planner/events");
        } catch (error) {
            utils.handleError(error);
        } finally {
            $(createEventButton).prop('disabled', false);
        }
    });
</script>

<%- include('../templates/footer')-%>