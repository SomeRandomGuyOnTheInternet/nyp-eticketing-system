<!-- TODO: gap detection -->
<!-- TODO: save base map in class, so can use zoom properly -->
<!-- TODO: on event fully booked, remove all waiting list people and send message to all waiting list -->
<!-- TODO: update reserved seats on 5s -->
<!-- TODO: show arrow to indicate the user to scroll up or down instead of scroll straight away -->
<!-- TODO: custom message -->
<!-- TODO: convert flash message to notifications -->
<!-- TODO: delete seat types -->
<!-- TODO: show whether seats are to be booked from top to bottom/bottom to top -->
<!-- TODO: show password thing for first time users -->

<%- include('../templates/head')-%>

<body>
    <%- include('../templates/navbar')-%>
    <div class="container">
        <!-- Always enclose everything in a container  -->
        <main role="main" class="inner cover">
            <!-- Idk what this element does but every tutorial uses it so eh might as well use it  -->

            <div class="mt-6"></div> <!-- Used for spacing between sections  -->
            <!-- Static card section  -->
            <!-- Heading  -->
            <div class="row">
                <!-- BTW, rows are used to create responsive columns but I'm guessing yall already know that. But if you don't, better learn the bootstrap grid system cause we're gonna use it a lot.  -->
                <div class="col-sm-6">
                    <h2 id="nameHeading" class="section-heading text-primary"><%= event.name %></h2>
                    <h5 id="startDateTimeHeading"><%= moment(event.startDateTime).format('Do MMMM YYYY') %> â€¢ <%= moment(event.startDateTime).format('h:mm a') %></h5>
                </div>
                <!-- Select (combo box) Input Card  -->
                <div class="col-sm-6 mt-2">
                    <div class="card input-card">
                        <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                        <div class="card-body input-card-body">
                            <div class="d-flex">
                                <div class="flex-grow-1">
                                    <label for="searchReservationInput" class="card-input-label">
                                        <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                        <small class="card-subtitle mb-2 text-secondary font-weight-normal">Search
                                            Reservations</small>
                                        <!-- The small element is where we actually write down what the input does  -->
                                    </label>
                                    <input id="searchReservationInput" name="searchReservationInput" class="form-control card-input" type="search"
                                        placeholder="E.g. En Qing">
                                </div>
                                <button id="clearSearchReservationButton" class="d-none btn text-muted" type="button"><i class="fas fa-times"></i></button>
                                <button class="btn text-muted" disabled><i class="fas fa-search"></i></button>
                                <!-- This is where the user actually inputs all their stuff  -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="mt-6"></div> <!-- Used for spacing between sections  -->
            <!-- Content  -->
            <h3 id="venueNameHeading"><%= event['Venue.name'] %></h3>
            <div class="row mt-3">
                <div class="col-sm-6 col-8 mt-3">
                    <!-- Used for spacing between sections  -->
                    <div class="card input-card">
                        <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                        <div class="card-body input-card-body">
                            <label for="testSelectInput" class="card-input-label">
                                <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                <small class="card-subtitle mb-2 text-secondary font-weight-normal">Zoom</small>
                                <!-- The small element is where we actually write down what the input does  -->
                            </label>
                            <select id="zoomQuadrantSelect" class="form-control card-input" id="testSelectInput" name="testSelectInput">
                                <!-- This is where the user actually inputs all their stuff  -->
                                <option value="whole">Whole Venue</option>
                                <option value="topLeft">Top Left</option>
                                <option value="topRight">Top Right</option>
                                <option value="bottomLeft">Bottom Left</option>
                                <option value="bottomRight">Bottom Right</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            <div id="seatChartCard" class="card mt-3"> <!-- Put interactible elements in a card, enclosed with card-body  -->
                <div class="card-body">
                    <div id="tableWrapper" class="seatCharts-wrapper"> <!-- Seat maps should be ensclosed in a seat chart wrapper -->
                        <div id="seatMap" class="seatCharts-container"> <!-- This is the element the seat chart is gonna latch itself onto -->
                            <div class="front-indicator">Front</div> <!-- The seat chart element should also contain the front indicator so the user knows the orientation of the map -->
                        </div>
                    </div>
                </div>
            </div>
            <div id="legend" class="seatCharts-legend row">
            </div>
            <div id="editSeatSelection" class="mt-3 d-none">
                <div class="row">
                    <div class="col-md-3 col-6" style="padding-right: 0;">
                        <div class="card input-card"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="noOfSeatsInput" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle mb-2 text-secondary font-weight-normal">No. of Seats</small> <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <input id="noOfSeatsInput" name="noOfSeatsInput" class="form-control card-input" type="number" value="0" min="0" max="10" placeholder="e.g. 3">
                            </div>
                        </div>
                    </div>
                    <div class="col-md-auto col-6">
                        <button id="applyNoOfSeats" type="button" class="btn btn-lg btn-primary mr-2 h-100">
                            <i class="fas fa-check"></i>&nbsp;&nbsp;Apply
                        </button>
                    </div>
                </div>
                <!-- <button id="removeSeatFromSelection" type="button" class="btn btn-lg btn-danger">
                    <i class="fas fa-minus"></i>&nbsp;&nbsp;Remove Seat
                </button> -->
            </div>
            <% if (event.seatsPerReservation !== null) { %>
            <div class="text-secondary mt-3 text-break">
                <span><%= event.seatsPerReservation %> seats per reservation</span>
            </div>
            <% } %>

            <form id="reserveSeatForm" action="/" method="post" class="d-none">
                <div class="mt-6"></div> <!-- Used for spacing between sections  -->
                <h3 id="reservationHeading">Reservation</h3>
                <div class="row">
                    <!-- BTW, rows are used to create responsive columns but I'm guessing yall already know that. But if you don't, better learn the bootstrap grid system cause we're gonna use it a lot.  -->
                    <div class="col-md-4">
                        <div class="card input-card mt-3">
                            <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="reservationNameInput" class="card-input-label">
                                    <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle mb-2 text-secondary font-weight-normal">Name</small>
                                    <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <input id="reservationNameInput" name="reservationNameInput" class="form-control card-input" type="text"
                                    placeholder="e.g. Lam En Qing"> <!-- This is where the user actually inputs all their stuff  -->
                            </div>
                        </div>
                    </div>
                    <!-- Select (combo box) Input Card  -->
                    <div class="col-md-4">
                        <div class="card input-card mt-3">
                            <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="reservationPhoneNumberInput" class="card-input-label">
                                    <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle mb-2 text-secondary font-weight-normal">Phone Number</small>
                                    <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <input id="reservationPhoneNumberInput" name="reservationPhoneNumberInput" class="form-control card-input" type="tel" placeholder="e.g. 95179116">
                                <!-- This is where the user actually inputs all their stuff  -->
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card input-card mt-3"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="noOfExtraAttendeesInput" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle mb-2 text-secondary font-weight-normal">No. of Extra Attendees</small> <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <input id="noOfExtraAttendeesInput" name="noOfExtraAttendeesInput" class="form-control card-input" type="number" min="0" max="5" placeholder="Leave empty if no extra attendees">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="mt-4"></div>
                <button id="reserveSeatButton" type="submit" class="btn btn-lg btn-primary responsive-float w-100">Reserve Seats</button>
            </form>

            <% if (attendeesOnWaitingList.length > 0) { %> 
            <div id="waitingListContainer">
                <div class="mt-6"></div>
                <h3>Waiting List</h3>
                <div class="mt-4"></div> <!-- Used for spacing between section heading and content  -->
                <!-- Content  -->
                <div class="card mt-3"> <!-- Put interactible elements in a card, enclosed with card-body  -->
                    <div class="card-body p-0">  <!-- We set the card's padding to 0 cause we want the table's edges to be flush with the table  -->
                        <!-- Table  -->
                        <div class="table-responsive">
                            <table class="table table-click table-lg"> 
                                <thead>
                                    <tr>
                                        <th scope="col">Name</th>
                                        <th scope="col">Phone No.</th>
                                        <th scope="col">No. of Extra Attendees</th>
                                        <th scope="col"></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% for (i = 0; i < attendeesOnWaitingList.length; i++) { %>
                                    <tr class="waitingListRow">
                                        <td class="font-weight-medium"><a class="clickable-child"><%= attendeesOnWaitingList[i].name %></a></td>
                                        <td class="font-weight-medium"><a class="clickable-child"><%= attendeesOnWaitingList[i].phoneNumber %></a></td>
                                        <td class="font-weight-medium"><a class="clickable-child"><%= attendeesOnWaitingList[i].noOfExtraAttendees %></a></td>
                                        <th scope="row" class="font-weight-medium text-primary"><i id="<%= attendeesOnWaitingList[i].id %>" class="waitingListViewReservationIcon fas fa-eye-slash" style="font-size: 25px; cursor: pointer;"></i></td>
                                    </tr>
                                    <% } %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <% } %>

            <div class="modal fade" id="seatDetailsModal" tabindex="-1" role="dialog" aria-labelledby="seatDetailsModal" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <!-- This is where you enter the title of the modal -->
                        <!-- This is the actual content (can put anything here) -->
                        <div class="modal-body">
                            <div class="d-flex">
                                <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                                <div id="seatDetailsSeatCell" class="seatCharts-seat seatCharts-cell available" style="height: 50px; width: 50px;"></div>    
                                <div class="ml-3 w-100">
                                    <span id="seatDetailsId" class="align-self-center h4"></span>
                                    <br>
                                    <span id="seatDetailsDescription" class="align-self-center"></span>
                                </div>
                                <button id="seatReservationDeleteBtn" type="button" class="btn btn-lg btn-link flex justify-content-end align-items-center d-none" data-seat-number="">
                                    <i class="d- fa fa-trash text-danger" style="font-size: 25px;"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal fade" id="reservationDetailsModal" tabindex="-1" role="dialog" aria-labelledby="reservationDetailsModal" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-body">
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                            <div class="row">
                                <div class="col-5 mb-3 pl-0">
                                    <span id="reservationConfirmName" class="h4 text-primary text-break-hyphen"></span><br>
                                    <span id="reservationConfirmPhNo" class="h5 text-break-hyphen"></span>
                                    <div id="reservationConfirmExtraAttendees" class="text-secondary mt-3 text-break">
                                        <span id="reservationConfirmNoOfExtraAttendees">0</span> extra attendees
                                    </div>
                                </div>
                                <div class="col-7 pr-0">
                                    <div id="selectedSeatConfirmationWrapper" class="mb-3">
                                    </div>
                                    <div id="reservationConfirmPreviousReservations" class="text-primary font-weight-medium mt-3 text-break pointer-cursor d-none">
                                        <span id="reservationConfirmNoOfPreviousReservations" class="font-weight-bold">0</span> seats previously reserved
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button id="confirmReservationButton" type="button" class="btn btn-lg btn-primary responsive-float w-100">Confirm Reservation</button>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>
</body>

<script>
    window.LoadingOverlay.show();

    const eventId = <%= event.id %>;

    const nameHeading = document.getElementById('nameHeading');
    const startDateTimeHeading = document.getElementById('startDateTimeHeading');
    const searchReservationInput = document.getElementById('searchReservationInput');
    const searchReservationBtn = document.getElementById('searchReservationButton');
    const clearSearchReservationBtn = document.getElementById('clearSearchReservationButton');
    const venueNameHeading = document.getElementById('venueNameHeading');
    const zoomQuadrantSelect = document.getElementById('zoomQuadrantSelect');
    const venueSelectInput = document.getElementById('venueSelectInput');
    const seatChartCard = document.getElementById('seatChartCard');
    const mapWrapper = document.getElementById('tableWrapper');
    const seatMap = document.getElementById('seatMap');
    const legend = document.getElementById('legend');
    const editSeatSelection = document.getElementById('editSeatSelection');
    const applyNoOfSeats = document.getElementById('applyNoOfSeats');
    const noOfSeatsInput = document.getElementById('noOfSeatsInput');
    const reserveSeatForm = document.getElementById('reserveSeatForm');
    const reservationHeading = document.getElementById('reservationHeading');
    const reservationNameInput = document.getElementById('reservationNameInput');
    const reservationPhoneNumberInput = document.getElementById('reservationPhoneNumberInput');
    const noOfExtraAttendeesInput = document.getElementById('noOfExtraAttendeesInput');
    const reserveSeatButton = document.getElementById('reserveSeatButton');
    const seatDetailsModal = document.getElementById('seatDetailsModal');
    const seatDetailsSeatCell = document.getElementById('seatDetailsSeatCell');
    const seatDetailsSeatId = document.getElementById('seatDetailsId');
    const seatDetailsDescription = document.getElementById('seatDetailsDescription');
    const seatReservationDeleteBtn = document.getElementById('seatReservationDeleteBtn');
    const waitingListContainer = document.getElementById('waitingListContainer');
    const waitingListRows = document.querySelectorAll('.waitingListRow');
    const waitingListViewReservationIcon = document.querySelectorAll('.waitingListViewReservationIcon');
    const reservationDetailsModal = document.getElementById('reservationDetailsModal');
    const reservationConfirmName = document.getElementById('reservationConfirmName');
    const reservationConfirmPhNo = document.getElementById('reservationConfirmPhNo');
    const reservationConfirmExtraAttendees = document.getElementById('reservationConfirmExtraAttendees');
    const reservationConfirmNoOfExtraAttendees = document.getElementById('reservationConfirmNoOfExtraAttendees');
    const selectedSeatConfirmationWrapper = document.getElementById('selectedSeatConfirmationWrapper');
    const reservationConfirmPreviousReservations = document.getElementById('reservationConfirmPreviousReservations');
    const reservationConfirmNoOfPreviousReservations = document.getElementById('reservationConfirmNoOfPreviousReservations');
    const previousSeatReservationsWrapper = document.getElementById('previousSeatReservationsWrapper');
    const confirmReservationButton = document.getElementById('confirmReservationButton');

    const selectableLegendClasses = 'text-primary clickable-div card-hover font-weight-medium'; // These are the css class belonging to legends that can be clicked on by the user

    let selectedSeatType = null;

    let event = null;

    let sc = new SeatChart({
        map: [],
        seatTypes: [],
        legends: [],
        rowLabels: SeatChart.alphabeticalLabels(),
        columnLabels: SeatChart.undefinedLabels(),
        mapNode: seatMap,
        wrapperNode: mapWrapper,
        legendNode: legend,
    });


    window.addEventListener("load", async function(e) {
        try {
            const result = await ajax.get(`${routes.helper.events}/${eventId}`);
            event = Event.parseApiResult(result);
        } catch (error) {
            return utils.handleError(error);
        }

        sc.map = event.seatMap;
        sc.seatTypes = event.seatTypes;
        sc.legends = sc.seatTypes.reduce(function(legends, seatType){
            if (!seatType.blocked) {
                legends.push([seatType.char, 'available', seatType.category, selectableLegendClasses]);
            }
            return legends;
        }, []);
        sc.legends.push(['G', 'blocked', 'Blocked']);
        sc.onClick = onSeatClickCallback();
        
        sc.bindMap();
        sc.scaleContentWidth();
        sc.disableBlockedSeats();
        sc.disableReservedSeats(event.reservedSeats);

        new autoComplete({
            data: {
                src: event.attendees,
                key: ["name", "phoneNumber"]
            },
            trigger: {
                event: ["input", "focusin", "focusout"]
            },
            placeHolder: "e.g. En Qing",
            selector: "#searchReservationInput",
            highlight: true,
            resultsList: {
                render: true,
            },
            resultItem: {
                content: (data, source) => {
                    source.innerHTML = `${data.match}&nbsp;â€¢&nbsp;${(data.key === "name") ? data.value.phoneNumber : data.value.name}`;
                },
                element: "li"
            },
            onSelection: feedback => {
                highlightAttendeeSeats(feedback.selection.value.id);
                searchReservationInput.value = feedback.selection.value.name;
                waitingListViewReservationIcon.forEach(obj => {
                    obj.classList.remove('fa-eye');
                    obj.classList.add('fa-eye-slash');
                });
            }
        });

        window.LoadingOverlay.hide();
    });


    window.addEventListener('resize', function (e) {
        sc.scaleContentWidth();
    });


    searchReservationInput.addEventListener('keyup', function (e) {
        if (e.target.value.length === 0) sc.activeNode.find('highlighted').status('reserved');
        clearSearchReservationBtn.classList.toggle('d-none', e.target.value.length === 0);
    });


    clearSearchReservationBtn.addEventListener('click', function (e) {
        sc.activeNode.find('highlighted').status('reserved');
        searchReservationInput.value = '';
        clearSearchReservationBtn.classList.add('d-none');
    });


    zoomQuadrantSelect.addEventListener('change', function (e) {
        sc.map = Array.from(event.seatMap);

        const dimensions = sc.getQuadrantDimensions(zoomQuadrantSelect.value);

        sc.spliceMapRow(dimensions[0][0], dimensions[0][1]);
        sc.spliceMapCol(dimensions[1][0], dimensions[1][1]);

        sc.rowLabels = SeatChart.alphabeticalLabels().slice(dimensions[0][0], dimensions[0][1]);
        sc.columnLabels = SeatChart.numericalLabels().slice(dimensions[1][0], dimensions[1][1]);

        sc.reloadMap();
        sc.disableBlockedSeats();
        sc.disableReservedSeats(event.reservedSeats);

        selectedSeatType = null;
        document.querySelectorAll('.seatCharts-legendCard').forEach(obj => obj.classList.remove('highlighted'));
        editSeatSelection.classList.add('d-none');
        waitingListViewReservationIcon.forEach(obj => {
            obj.classList.remove('fa-eye');
            obj.classList.add('fa-eye-slash');
        });
    });


    clearSearchReservationBtn.addEventListener('click', function (e) {
        sc.activeNode.find('highlighted').status('reserved');
        searchReservationInput.value = '';
        clearSearchReservationBtn.classList.add('d-none');
    });


    document.addEventListener('click', function (e) {
        const node = e.target;

        if (node.classList.contains('seatCharts-legendCard') && node.classList.contains('clickable-div')) {
            utils.addUnloadListener();
            
            const character = node.getAttribute('data-seat-character');
            const highlighted = node.classList.contains('highlighted');

            document.querySelectorAll('.seatCharts-legendCard').forEach(obj => obj.classList.remove('highlighted'));

            if (character) {
                node.classList.toggle('highlighted', highlighted === false);
                editSeatSelection.classList.toggle('d-none', highlighted === true);
                selectedSeatType = (highlighted === true) ? null : character;
            }

            const selectedSeats = sc.activeNode.find('selected').seats;
            updateSeatSelectionInput(selectedSeats.length, (selectedSeats.filter(seat => seat.settings.character === selectedSeatType)).length);
        }
    }, false);


    applyNoOfSeats.addEventListener('click', function (e) {
        if (selectedSeatType !== null) {
            const noOfSeats = Number(noOfSeatsInput.value);

            let selectedSeatCharacters = (sc.activeNode.find('selected').seats).reduce(function(filtered, seat) {
                if (seat.settings.character !== selectedSeatType) {
                    filtered.push(seat.settings.character);
                }
                return filtered;
            }, []);

            if (isNaN(noOfSeats)) return toast.flash.danger("Please provide a valid number of seats!");
            if (noOfSeats < 0) return toast.flash.danger("Please provide a higher number of seats!");
            if (noOfSeats > (sc.activeNode.find(`${selectedSeatType}.available`)).length) return toast.flash.danger("Please provide a lower number of seats!");

            for (var i = 0; i < noOfSeats; i++) selectedSeatCharacters.push(selectedSeatType);

            selectSeatsUsingSelection(selectedSeatCharacters);
        }
    });

    waitingListViewReservationIcon.forEach(function(element) {
        element.addEventListener('click', function (e) {
            const attendee = event.attendees.filter(attendee => attendee.id == this.id);
            const wasActive = this.classList.contains('fa-eye');

            sc.activeNode.find('highlighted').status('reserved');
            waitingListViewReservationIcon.forEach(obj => {
                obj.classList.remove('fa-eye');
                obj.classList.add('fa-eye-slash');
            });

            if (attendee.length === 1) {
                (wasActive) ? null : highlightAttendeeSeats(attendee[0].id);
                reservationNameInput.value = (wasActive) ? '' : attendee[0].name;
                reservationPhoneNumberInput.value = (wasActive) ? '' : attendee[0].phoneNumber;
                this.classList.toggle('fa-eye-slash', wasActive);
                this.classList.toggle('fa-eye', !wasActive);
            } else {
                return toast.flash.danger('Something went wrong while retrieving the seats for that attendee!');
            }
        });
    });


    reserveSeatForm.addEventListener('submit', function (e) {
        e.preventDefault();

        const reservationNameInputVal = reservationNameInput.value.trim();
        const reservationPhoneNumberInputVal = reservationPhoneNumberInput.value.trim();
        const noOfExtraAttendeesInputVal = noOfExtraAttendeesInput.value;
        const selectedSeats = sc.activeNode.find('selected');

        if (selectedSeats.length === 0) return toast.flash.danger('Please select some seats to reserve for the attendee!');
        if (reservationNameInputVal === '') return toast.flash.danger('Please enter a name for the attendee!');
        if (reservationPhoneNumberInputVal === '') return toast.flash.danger('Please enter a phone number for the attendee!');
        if (!(/^(8|9)[0-9]{7}$/.test(reservationPhoneNumberInputVal))) return toast.flash.danger('Please enter a valid phone number for the attendee!');

        const sortedSeats = selectedSeats.seats.reduce((sortedSeats, seat) => ({
            ...sortedSeats,
            [seat.settings.data.category]: [...(sortedSeats[seat.settings.data.category] || []), seat]
        }), {});

        sc.activeNode.find('highlighted').status('reserved');
        utils.removeAllChildNodes(selectedSeatConfirmationWrapper);
        reservationConfirmName.textContent = reservationNameInputVal;
        reservationConfirmPhNo.textContent = reservationPhoneNumberInputVal;
        reservationConfirmExtraAttendees.classList.toggle('d-none', noOfExtraAttendeesInputVal === '');
        reservationConfirmNoOfExtraAttendees.textContent = noOfExtraAttendeesInputVal;
        for (const category in sortedSeats) {
            selectedSeatConfirmationWrapper.appendChild(createSelectedSeatsInCategoryNode(category, sortedSeats[category]));
        }

        const existingAttendee = event.attendees.filter(attendee => String(attendee.phoneNumber) === reservationPhoneNumberInputVal);
        if (existingAttendee.length === 1) {
            const noOfReservedSeats = (event.reservedSeats.filter(seat => seat.attendeeId === existingAttendee[0].id)).length;
            reservationConfirmNoOfPreviousReservations.innerText = noOfReservedSeats;
            reservationConfirmPreviousReservations.classList.toggle("d-none", noOfReservedSeats === 0);
        } else {
            reservationConfirmPreviousReservations.classList.add("d-none");
        }
        
        $(reservationDetailsModal).modal();
    });


    reservationConfirmPreviousReservations.addEventListener('click', async function (e) {
        const existingAttendee = event.attendees.filter(attendee => String(attendee.phoneNumber) === reservationPhoneNumberInput.value.trim());
        if (existingAttendee.length === 1)  highlightAttendeeSeats(existingAttendee[0].id);

        $(reservationDetailsModal).modal('hide');
    });


    confirmReservationButton.addEventListener('click', async function (e) {
        window.LoadingOverlay.show();
        confirmReservationButton.disabled = true;
        
        let attendee = new EventAttendee({
            name: reservationNameInput.value,
            phoneNumber: reservationPhoneNumberInput.value,
            reservedSeats: sc.activeNode.find('selected').seatIds,
            noOfExtraAttendees: noOfExtraAttendeesInput.value,
            eventId: eventId
        });

        try {
            attendee = await ajax.post(routes.helper.reservations, attendee);
            await ajax.post(routes.notification.success, 'The reservation has been created successfully!');
        } catch (error) {
            confirmReservationButton.disabled = true;
            window.LoadingOverlay.hide();
            return utils.handleError(error);
        }

        try {
            await ajax.post(routes.helper.sendConfirmationSMS, { attendeeId: attendee.id });
            await ajax.post(routes.notification.success, 'Confirmation SMS has been sent successfully to the attendee!');
        } catch (error) {
            await ajax.post(routes.notification.success, 'Something went wrong while sending the confirmation SMS to the attendee! Please provide them with their reservation details manually.');
        }

        if (sc.activeNode.find('available').seats.length === 0) {
            try {
                await ajax.delete(`${routes.helper.events}/${eventId}/extra-attendees`);
                await ajax.post(routes.notification.success, 'Due to the event being fully booked, the waiting list has been purged successfully!');
            } catch (error) {
                await ajax.post(routes.notification.danger, 'Something went wrong while deleting all the attendees in the waiting list due to the event being fully booked!');
            }
        }

        utils.removeUnloadListener();
        window.location.reload();
    });


    seatReservationDeleteBtn.addEventListener('click', async function (e) {
        const seatNumber = seatReservationDeleteBtn.getAttribute("data-seat-number");
        if (!seatNumber) return toast.flash.danger("Something went wrong while deleting this reservation. Please try again later!");

        const check = confirm("Are you sure you want to delete this seat reservation?");
        if (check === true) {
            seatReservationDeleteBtn.disabled = true;
            window.LoadingOverlay.show();

            try {
                await ajax.delete(`${routes.helper.events}/${eventId}/seats/${seatNumber}`);
                await ajax.post(routes.notification.success, 'Successfully deleted reservation!');
                utils.removeUnloadListener();
                window.location.reload();
            } catch (error) {
                utils.handleError(error);
            }
        }
    });


    function onSeatClickCallback() {
        return function () {
            const allSelectedSeats = sc.activeNode.find('selected').seats;

            switch (this.status()) {
                case 'available':
                    utils.addUnloadListener();

                    reserveSeatForm.classList.remove('d-none');
                    if (event.seatsPerReservation) {
                        if (allSelectedSeats.length >= event.seatsPerReservation) {
                            toast.flash.danger('You have reached the maximum number of seats allowed per reservation!')
                            return 'available';
                        }
                    }

                    updateSeatSelectionInput(allSelectedSeats.length, (allSelectedSeats.filter(seat => seat.settings.character === selectedSeatType)).length + 1);
                    return 'selected';

                case 'selected':
                    reserveSeatForm.classList.toggle('d-none', allSelectedSeats.length <= 1);

                    updateSeatSelectionInput(allSelectedSeats.length, (allSelectedSeats.filter(seat => seat.settings.character === selectedSeatType)).length - 1);
                    return 'available';

                case 'blocked':
                    populateSeatDetailsModal(this.settings.id, `Blocked for ${this.settings.data.category}`, this.settings.data.classes);
                    seatReservationDeleteBtn.classList.add("d-none");
                    return 'blocked';

                case 'highlighted':
                case 'reserved':
                    const seatDetails = event.reservedSeats.filter(seat => seat.seatNumber == this.settings.id);
                    const attendee = event.attendees.filter(attendee => attendee.id == seatDetails[0].attendeeId);
                    if (attendee.length !== 1) return this.style();

                    populateSeatDetailsModal(`${this.settings.id} â€¢ ${this.settings.data.category}`, `Reserved for ${attendee[0].name} â€¢ ${attendee[0].phoneNumber}`, this.settings.data.classes);
                    seatReservationDeleteBtn.classList.remove("d-none");
                    seatReservationDeleteBtn.setAttribute("data-seat-number", this.settings.id);
                    return this.status();

                default:
                    return this.style();
            }
        };
    };


    selectSeatsUsingSelection = (selectedSeatCharacters) => {
        if (event.seatsPerReservation) {
            if (selectedSeatCharacters.length > event.seatsPerReservation) {
                return toast.flash.danger('You have reached the maximum number of seats allowed per reservation!')
            }
        }

        if (selectedSeatCharacters.length > 0) {
            reserveSeatForm.classList.remove('d-none');

            sc.activeNode.find('selected').status('available');
            updateSeatSelectionInput(selectedSeatCharacters.length, (selectedSeatCharacters.filter(character => character === selectedSeatType)).length);

            const seatCharacterCount = utils.countUniqueCharacters(selectedSeatCharacters);
            for (const character in seatCharacterCount) {
                const availableSeatBlock = sc.findAvailableSeatBlock(character, seatCharacterCount[character], Boolean(event.prioritiseBackRows));
                sc.activeNode.get(availableSeatBlock).status('selected');
            }
        } else {
            sc.activeNode.find('selected').status('available');
        }
    };


    updateSeatSelectionInput = (totalNoOfSelectedSeats = 0, noOfSelectedSeatsForCurrentType = 0) => {
        if (selectedSeatType !== null) {
            const limit = (event.seatsPerReservation) ? event.seatsPerReservation : event.noOfReservableSeats;
            const totalNoOfAvailableSeatsInCurrentType = (sc.activeNode.find(`${selectedSeatType}.available`)).length;

            noOfSeatsInput.value = noOfSelectedSeatsForCurrentType;
            noOfSeatsInput.max = Math.min(noOfSelectedSeatsForCurrentType + (limit - totalNoOfSelectedSeats), totalNoOfAvailableSeatsInCurrentType);
        }
    };


    highlightAttendeeSeats = (attendeeId) => {
        const seatDetails = event.reservedSeats.filter(seat => seat.attendeeId == attendeeId);
        if (seatDetails.length === 0) return toast.flash.danger('This attendee does not have any seats reserved for this event!');

        sc.activeNode.find('highlighted').status('reserved');
        
        const seatsToBeHighlighted = sc.activeNode.get(seatDetails.map(seat => seat.seatNumber));
        if (seatsToBeHighlighted.length !== seatDetails.length) return toast.flash.danger('Please zoom out to view all the seats reserved by the attendee!');

        seatsToBeHighlighted.status('highlighted');

        // seatChartCard.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'nearest' });
    };


    populateSeatDetailsModal = (seatId, description, cssClasses) => {
        seatDetailsSeatId.textContent = seatId;
        seatDetailsDescription.textContent = description;

        let cellClassList = seatDetailsSeatCell.classList;
        while (cellClassList.length > 0)  cellClassList.remove(cellClassList.item(0));
        cellClassList.add(...['seatCharts-seat', 'seatCharts-cell', 'available', cssClasses]);

        $(seatDetailsModal).modal();
    };


    createSelectedSeatsInCategoryNode = (category, seats) => {
        const parentDiv = document.createElement('div');
        parentDiv.classList.add(...['mt-1', 'mb-2']);

        const seatCategoryHeading = document.createElement('span');
        seatCategoryHeading.classList.add(...['h6', 'text-muted']);
        seatCategoryHeading.appendChild(document.createTextNode(`${category} Seats`));
        parentDiv.appendChild(seatCategoryHeading);

        const seatRow = document.createElement('div');
        seatRow.classList.add(...['row-small-margin', 'row', 'mt-2']);
        parentDiv.appendChild(seatRow);
    
        for (let i = 0; i < seats.length; i++) {
            const seatCol = document.createElement('div');
            seatCol.classList.add(...['col-small-margin', 'col-auto', 'mb-2']);
            seatRow.appendChild(seatCol);

            const card = document.createElement('div');
            card.classList.add('card');
            seatCol.appendChild(card);

            const cardBody = document.createElement('div');
            cardBody.classList.add(...['card-body', 'py-2', 'px-3']);
            card.appendChild(cardBody);

            const seatNumber = document.createElement('span');
            seatNumber.classList.add('h6');
            seatNumber.appendChild(document.createTextNode(seats[i].settings.id));
            cardBody.appendChild(seatNumber);
        }
    
        return parentDiv;
    };
</script>

<%- include('../templates/footer')-%>