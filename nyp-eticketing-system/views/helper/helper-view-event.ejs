<!-- TODO: Check for gaps -->
<!-- TODO: Delete seat reservation -->
<!-- TODO: Validate the number of seats -->
<!-- TODO: Hide reservation until seat selected -->
<!-- TODO: Make button have a loading icon -->
<!-- TODO: Check whether back rows have empty seats -->
<!-- TODO: Fix seats not showing up and select in safari -->

<%- include('../templates/head')-%>

<body>
    <%- include('../templates/navbar')-%>
    <div class="container">
        <!-- Always enclose everything in a container  -->
        <main role="main" class="inner cover">
            <!-- Idk what this element does but every tutorial uses it so eh might as well use it  -->

            <div class="mt-6"></div> <!-- Used for spacing between sections  -->
            <!-- Static card section  -->
            <!-- Heading  -->
            <div class="row">
                <!-- BTW, rows are used to create responsive columns but I'm guessing yall already know that. But if you don't, better learn the bootstrap grid system cause we're gonna use it a lot.  -->
                <div class="col-sm-6">
                    <h2 id="nameHeading" class="section-heading text-primary"><%= event.name %></h2>
                    <h5 id="startDateTimeHeading"><%= moment(event.startDateTime).format('Do MMMM YYYY') %> â€¢ <%= moment(event.startDateTime).format('h:mm a') %></h5>
                </div>
                <!-- Select (combo box) Input Card  -->
                <div class="col-sm-6 mt-2">
                    <div class="card input-card">
                        <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                        <div class="card-body input-card-body">
                            <div class="d-flex">
                                <div class="flex-grow-1">
                                    <label for="searchReservationInput" class="card-input-label">
                                        <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                        <small class="card-subtitle mb-2 text-secondary font-weight-normal">Search
                                            Reservations</small>
                                        <!-- The small element is where we actually write down what the input does  -->
                                    </label>
                                    <input id="searchReservationInput" name="searchReservationInput" class="form-control card-input" type="search"
                                        placeholder="E.g. 91864675">
                                </div>
                                <button id="clearSearchReservationButton" class="btn text-muted" type="button" style="display: none;"><i class="fas fa-times"></i></button>
                                <button id="searchReservationButton" class="btn text-primary" type="button"><i class="fas fa-search"></i></button>
                                <!-- This is where the user actually inputs all their stuff  -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="mt-6"></div> <!-- Used for spacing between sections  -->
            <!-- Content  -->
            <h3 id="venueNameHeading"><%= event['Venue.name'] %></h3>
            <div class="row mt-3">
                <div class="col-sm-6 col-8 mt-3">
                    <!-- Used for spacing between sections  -->
                    <div class="card input-card">
                        <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                        <div class="card-body input-card-body">
                            <label for="testSelectInput" class="card-input-label">
                                <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                <small class="card-subtitle mb-2 text-secondary font-weight-normal">Zoom</small>
                                <!-- The small element is where we actually write down what the input does  -->
                            </label>
                            <select id="zoomQuadrantSelect" class="form-control card-input" id="testSelectInput" name="testSelectInput">
                                <!-- This is where the user actually inputs all their stuff  -->
                                <option value="whole">Whole Venue</option>
                                <option value="topLeft">Top Left</option>
                                <option value="topRight">Top Right</option>
                                <option value="bottomLeft">Bottom Left</option>
                                <option value="bottomRight">Bottom Right</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            <div id="seatChartCard" class="card mt-3"> <!-- Put interactible elements in a card, enclosed with card-body  -->
                <div class="card-body">
                    <div id="tableWrapper" class="seatCharts-wrapper"> <!-- Seat maps should be ensclosed in a seat chart wrapper -->
                        <div id="seatMap" class="seatCharts-container"> <!-- This is the element the seat chart is gonna latch itself onto -->
                            <div class="front-indicator">Front</div> <!-- The seat chart element should also contain the front indicator so the user knows the orientation of the map -->
                        </div>
                    </div>
                </div>
            </div>
            <div id="legend" class="seatCharts-legend row">
            </div>
            <% if (event.seatsPerReservation !== null) { %>
            <div class="text-secondary mt-3 text-break">
                <span><%= event.seatsPerReservation %> seats per reservation</span>
            </div>
            <% } %>

            <form id="reserveSeatForm" action="/" method="post" class="d-none">
                <div class="mt-6"></div> <!-- Used for spacing between sections  -->
                <h3>Reservation</h3>
                <div class="row">
                    <!-- BTW, rows are used to create responsive columns but I'm guessing yall already know that. But if you don't, better learn the bootstrap grid system cause we're gonna use it a lot.  -->
                    <div class="col-md-4">
                        <div class="card input-card mt-3">
                            <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="reservationNameInput" class="card-input-label">
                                    <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle mb-2 text-secondary font-weight-normal">Name</small>
                                    <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <input id="reservationNameInput" name="reservationNameInput" class="form-control card-input" type="text"
                                    placeholder="e.g. Lam En Qing"> <!-- This is where the user actually inputs all their stuff  -->
                            </div>
                        </div>
                    </div>
                    <!-- Select (combo box) Input Card  -->
                    <div class="col-md-4">
                        <div class="card input-card mt-3">
                            <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="reservationPhoneNumberInput" class="card-input-label">
                                    <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle mb-2 text-secondary font-weight-normal">Phone Number</small>
                                    <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <input id="reservationPhoneNumberInput" name="reservationPhoneNumberInput" class="form-control card-input" type="tel" placeholder="e.g. 95179116">
                                <!-- This is where the user actually inputs all their stuff  -->
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card input-card mt-3"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="noOfExtraAttendeesInput" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle mb-2 text-secondary font-weight-normal">No. of Extra Attendees</small> <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <input id="noOfExtraAttendeesInput" name="noOfExtraAttendeesInput" class="form-control card-input" type="number" min="1" max="5" placeholder="Leave empty if no extra attendees">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="mt-4"></div>
                <button id="reserveSeatButton" type="submit" class="btn btn-lg btn-primary responsive-float w-100">Reserve Seats</button>
            </form>

            <% if (attendeesOnWaitingList.length > 0) { %> 
            <div id="waitingListContainer">
                <div class="mt-6"></div>
                <h3>Waiting List</h3>
                <div class="mt-4"></div> <!-- Used for spacing between section heading and content  -->
                <!-- Content  -->
                <div class="card mt-3"> <!-- Put interactible elements in a card, enclosed with card-body  -->
                    <div class="card-body p-0">  <!-- We set the card's padding to 0 cause we want the table's edges to be flush with the table  -->
                        <!-- Table  -->
                        <div class="table-responsive">
                            <table class="table table-hover table-click table-lg"> 
                                <thead>
                                    <tr>
                                        <th scope="col">Name</th>
                                        <th scope="col">Phone No.</th>
                                        <th scope="col">No. of Extra Attendees</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% for (i = 0; i < attendeesOnWaitingList.length; i++) { %>
                                    <tr id="<%= attendeesOnWaitingList[i].id %>" class="waitingListRow">
                                        <td class="font-weight-medium"><a class="clickable-child"><%= attendeesOnWaitingList[i].name %></a></td>
                                        <td class="font-weight-medium"><a class="clickable-child"><%= attendeesOnWaitingList[i].phoneNumber %></a></td>
                                        <td class="font-weight-medium"><a class="clickable-child"><%= attendeesOnWaitingList[i].noOfExtraAttendees %></a></td>
                                    </tr>
                                    <% } %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <% } %>

            <div class="modal fade" id="seatDetailsModal" tabindex="-1" role="dialog" aria-labelledby="seatDetailsModal" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <!-- This is where you enter the title of the modal -->
                        <!-- This is the actual content (can put anything here) -->
                        <div class="modal-body">
                            <div class="d-flex">
                                <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                                <div id="seatDetailsSeatCell" class="seatCharts-seat seatCharts-cell available" style="height: 50px; width: 50px;"></div>    
                                <div class="ml-3 w-100">
                                    <span id="seatDetailsId" class="align-self-center h4"></span>
                                    <br>
                                    <span id="seatDetailsDescription" class="align-self-center"></span>
                                </div>
                                <!-- <i id="seatDetailsDelete" class="d-flex justify-content-end align-items-center fa fa-trash text-danger" style="font-size: 25px;"></i> -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal fade" id="reservationDetailsModal" tabindex="-1" role="dialog" aria-labelledby="reservationDetailsModal" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-body">
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                            <div class="row">
                                <div class="col-5 mb-3 pl-0">
                                    <span id="reservationConfirmName" class="h4 text-primary text-break-hyphen"></span><br>
                                    <span id="reservationConfirmPhNo" class="h5 text-break-hyphen"></span>
                                    <div id="reservationConfirmExtraAttendees" class="text-secondary mt-3 text-break font-italic">
                                        <span id="reservationConfirmNoOfExtraAttendees">0</span> extra attendees
                                    </div>
                                </div>
                                <div class="col-7 pr-0">
                                    <div id="selectedSeatConfirmationWrapper" class="mb-3">
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button id="confirmReservationButton" type="button" class="btn btn-lg btn-primary responsive-float w-100">Confirm Reservation</button>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>
</body>

<script>
    const eventId = <%= event.id %>;

    const nameHeading = '#nameHeading';
    const startDateTimeHeading = '#startDateTimeHeading';
    const searchReservationInput = '#searchReservationInput';
    const searchReservationBtn = '#searchReservationButton';
    const clearSearchReservationBtn = '#clearSearchReservationButton';
    const venueNameHeading = '#venueNameHeading';
    const zoomQuadrantSelect = '#zoomQuadrantSelect';
    const venueSelectInput = '#venueSelectInput';
    const seatChartCard = '#seatChartCard';
    const mapWrapper = '#tableWrapper';
    const seatMap = '#seatMap';
    const legend = '#legend';
    const reserveSeatForm = '#reserveSeatForm';
    const reservationNameInput = '#reservationNameInput';
    const reservationPhoneNumberInput = '#reservationPhoneNumberInput';
    const noOfExtraAttendeesInput = '#noOfExtraAttendeesInput';
    const reserveSeatButton = '#reserveSeatButton';
    const seatDetailsModal = '#seatDetailsModal';
    const seatDetailsSeatCell = '#seatDetailsSeatCell';
    const seatDetailsSeatId = '#seatDetailsId';
    const seatDetailsDescription = '#seatDetailsDescription';
    const waitingListContainer = '#waitingListContainer';
    const waitingListRow = '.waitingListRow';
    const waitingListRowDelete = '.waitingListRowDelete';
    const reservationDetailsModal = '#reservationDetailsModal';
    const reservationConfirmName = '#reservationConfirmName';
    const reservationConfirmPhNo = '#reservationConfirmPhNo';
    const reservationConfirmExtraAttendees = '#reservationConfirmExtraAttendees';
    const reservationConfirmNoOfExtraAttendees = '#reservationConfirmNoOfExtraAttendees';
    const selectedSeatConfirmationWrapper = '#selectedSeatConfirmationWrapper';
    const confirmReservationButton = '#confirmReservationButton';

    const selectableLegendClasses = 'text-primary clickable-div card-hover font-weight-medium'; // These are the css class belonging to legends that can be clicked on by the user

    let event;

    // Seat chart configuration
    let sc = new SeatChart({
        map: [],
        seatTypes: [],
        legends: [],
        rowLabels: SeatChart.alphabeticalLabels(),
        columnLabels: SeatChart.undefinedLabels(),
        mapNode: seatMap,
        wrapperNode: mapWrapper,
        legendNode: legend,
    });

    // Rest of the functions
    $(document).ready(async function() {
        try {
            event = Event.parseApiResult(await ajax.get(`${routes.helper.events}/${eventId}`));
        } catch (error) {
            return utils.handleError(error);
        }

        sc.map = event.seatMap;
        sc.seatTypes = event.seatTypes;
        sc.legends = sc.seatTypes.reduce(function(legends, seatType){
            if (!seatType.blocked) {
                legends.push([seatType.char, "available", seatType.category, selectableLegendClasses]);
            }
            return legends;
        }, []);
        sc.legends.push(["G", "blocked", "Blocked"]);
        sc.onClick = onSeatClickCallback();
        
        sc.bindMap();
        sc.scaleContentWidth();
        sc.disableBlockedSeats();
        sc.disableReservedSeats(event.reservedSeats);
    });

    $(window).resize(function() { // Upon resizing the browser window, the scaling function is called to make sure the seat chart fits within the new dimensions of the parent container
        sc.scaleContentWidth();
    });

    $(searchReservationInput).keyup(function(e) {
        // if (e.keyCode == 13) {
        //     const attendee = event.attendees.filter(attendee => attendee.phoneNumber == $(this).val());
        //     if (attendee.length !== 1) return toast.danger("This phone number is not tied to any reservation!");

        //     highlightAttendeeSeats(attendee[0].id);
        // }
        if (e.target.value.length === 0) $(clearSearchReservationBtn).hide();
        else $(clearSearchReservationBtn).show();
    });

    $(clearSearchReservationBtn).click(function() {
        sc.activeNode.find('highlighted').status('reserved');
        $(searchReservationInput).val('');
        $(clearSearchReservationBtn).hide();
    });

    $(searchReservationBtn).click(function() {
        const attendee = event.attendees.filter(attendee => attendee.phoneNumber == $(searchReservationInput).val());
        if (attendee.length !== 1) return toast.danger("This phone number is not tied to any reservation!");

        document.querySelectorAll(waitingListRow).forEach(obj => obj.classList.remove("table-active"));

        highlightAttendeeSeats(attendee[0].id);
    });

    $(zoomQuadrantSelect).change(function() {
        document.querySelectorAll(waitingListRow).forEach(obj => obj.classList.remove("table-active"));

        sc.map = Array.from(event.seatMap);

        const dimensions = sc.getQuadrantDimensions($(zoomQuadrantSelect).val());

        sc.spliceMapRow(dimensions[0][0], dimensions[0][1]);
        sc.spliceMapCol(dimensions[1][0], dimensions[1][1]);

        sc.rowLabels = SeatChart.alphabeticalLabels().slice(dimensions[0][0], dimensions[0][1]);
        sc.columnLabels = SeatChart.numericalLabels().slice(dimensions[1][0], dimensions[1][1]);

        sc.reloadMap();
        sc.disableBlockedSeats();
        sc.disableReservedSeats(event.reservedSeats);
    });

    $(clearSearchReservationBtn).click(function() {
        sc.activeNode.find('highlighted').status('reserved');
        $(searchReservationInput).val('');
        $(clearSearchReservationBtn).hide();
    });

    document.addEventListener('click', function (e) {
        const node = e.target;

        if (node.classList.contains("clickable-div") && node.classList.contains("seatCharts-legendCard")) {
            utils.addUnloadListener();

            const character = node.getAttribute("data-seat-character");

            if (character) {
                let selectedSeatsCharacters = (sc.activeNode.find('selected').seats).map(seat => seat.settings.character);
                selectedSeatsCharacters.push(character);

                if (event.seatsPerReservation) {
                    if (selectedSeatsCharacters.length > event.seatsPerReservation) {
                        toast.danger("You have reached the maximum number of seats allowed per reservation!")
                        return;
                    }
                }

                if (selectedSeatsCharacters.length > 0) {
                    $(reserveSeatForm).removeClass("d-none");
                    sc.activeNode.find('selected').status('available');
                    // const sortedCharacters = sc.charactersSortedByFrequency.reverse();
                    // selectedSeatsCharacters.sort((a, b) => sortedCharacters.indexOf(a) - sortedCharacters.indexOf(b));
                    selectedSeatsCharacters.forEach(seatCharacter => sc.selectNearestAvailableSeat(sc.map.length - 1, 0, seatCharacter));
                }
            }
        }
    }, false);

    $(waitingListRow).click(function() {
        const attendee = event.attendees.filter(attendee => attendee.id == this.id);
        const wasActive = this.classList.contains("table-active");

        document.querySelectorAll(waitingListRow).forEach(obj => obj.classList.remove("table-active"));
        sc.activeNode.find('highlighted').status('reserved');
        
        if (attendee.length == 1) {
            $(reservationNameInput).val((wasActive) ? '' : attendee[0].name);
            $(reservationPhoneNumberInput).val((wasActive) ? '' : attendee[0].phoneNumber);
            this.classList.add((wasActive) ? null : "table-active");
            (wasActive) ? null : highlightAttendeeSeats(attendee[0].id);
        } else {
            return toast.danger("Something went wrong while retrieving the seats for that attendee!");
        }
    });

    $(reserveSeatForm).submit(async function (e) {
        e.preventDefault();

        const reservationNameInputVal = $(reservationNameInput).val();
        const reservationPhoneNumberInputVal = $(reservationPhoneNumberInput).val();
        const noOfExtraAttendeesInputVal = $(noOfExtraAttendeesInput).val();
        const selectedSeats = sc.activeNode.find('selected');

        if (selectedSeats.length == 0) return toast.danger("Please select some seats to reserve for the attendee!");
        if (reservationNameInputVal === "") return toast.danger("Please enter a name for the attendee!");
        if (reservationPhoneNumberInputVal == "") return toast.danger("Please enter a phone number for the attendee!");
        if (!(/^(8|9)[0-9]{7}$/.test(reservationPhoneNumberInputVal))) return toast.danger("Please enter a valid phone number for the attendee!");

        const sortedSeats = selectedSeats.seats.reduce((sortedSeats, seat) => ({
            ...sortedSeats,
            [seat.settings.data.category]: [...(sortedSeats[seat.settings.data.category] || []), seat]
        }), {});

        $(selectedSeatConfirmationWrapper).empty();
        $(reservationConfirmName).text(reservationNameInputVal);
        $(reservationConfirmPhNo).text(reservationPhoneNumberInputVal);
        $(reservationConfirmExtraAttendees).toggle(noOfExtraAttendeesInputVal !== '');
        $(reservationConfirmNoOfExtraAttendees).text(noOfExtraAttendeesInputVal);
        for (const category in sortedSeats) {
            $(selectedSeatConfirmationWrapper).append(renderSelectedSeatsOfCategory(category, sortedSeats[category]));
        }

        $(reservationDetailsModal).modal();
    });

    $(confirmReservationButton).click(async function() {
        $(confirmReservationButton).prop('disabled', true);
        
        let attendee = new EventAttendee({
            name: $(reservationNameInput).val(),
            phoneNumber: $(reservationPhoneNumberInput).val(),
            reservedSeats: sc.activeNode.find('selected').seatIds,
            noOfExtraAttendees: $(noOfExtraAttendeesInput).val(),
            eventId: eventId
        });

        try {
            attendee = await ajax.post(routes.helper.reservations, attendee);
        } catch (error) {
            $(confirmReservationButton).prop('disabled', false);
            return utils.handleError(error);
        } 

        utils.removeUnloadListener();

        try {
            await ajax.post(routes.helper.sendConfirmationSMS, { attendeeId: attendee.id });
            await ajax.post(routes.index.successFlash, "The reservation has been created successfully!");
        } catch (error) {
            await ajax.post(routes.index.errorFlash, "Something went wrong while sending the confirmation message to the attendee! Please provide them with their reservation details manually.");
        } finally {
            window.location.reload();
        }
    });

    highlightAttendeeSeats = (attendeeId) => {
        const seatDetails = event.reservedSeats.filter(seat => seat.attendeeId == attendeeId);
        if (seatDetails.length === 0) return toast.danger("This attendee does not have any seats reserved for this event!");

        sc.activeNode.find('highlighted').status('reserved');
        sc.activeNode.get(seatDetails.map(seat => seat.seatNumber)).status('highlighted');

        document.getElementById(seatChartCard.substring(1)).scrollIntoView({behavior: "smooth", block: "nearest", inline: "nearest"});
    };

    populateSeatDetailsModal = (seatId, description, cssClasses) => {
        $(seatDetailsSeatId).text(seatId);
        $(seatDetailsDescription).text(description);
        $(seatDetailsSeatCell)
            .removeClass()
            .addClass('seatCharts-seat seatCharts-cell available')
            .addClass(cssClasses);
            
        $(seatDetailsModal).modal();
    };

    function onSeatClickCallback() {
        return function () {
            switch (this.status()) {
                case 'available':
                    utils.addUnloadListener();

                    $(reserveSeatForm).removeClass("d-none");
                    const selectedSeatIds = sc.activeNode.find('selected').seatIds;

                    if (event.seatsPerReservation) {
                        if (selectedSeatIds.length >= event.seatsPerReservation) {
                            toast.danger("You have reached the maximum number of seats allowed per reservation!")
                            return 'available';
                        }
                    }
                    return 'selected';
                case 'selected':
                    (sc.activeNode.find('selected').seatIds.length <= 1)
                        ? $(reserveSeatForm).addClass("d-none")
                        : $(reserveSeatForm).removeClass("d-none");
                    return 'available';
                case 'blocked':
                    populateSeatDetailsModal(this.settings.id, `Blocked for ${this.settings.data.category}`, this.settings.data.classes);
                    return 'blocked';
                case 'highlighted':
                case 'reserved':
                    const seatDetails = event.reservedSeats.filter(seat => seat.seatNumber == this.settings.id);
                    const attendee = event.attendees.filter(attendee => attendee.id == seatDetails[0].attendeeId);
                    if (attendee.length !== 1) return this.style();

                    populateSeatDetailsModal(this.settings.id, `Reserved for ${attendee[0].name}`, this.settings.data.classes);
                    return this.status();
                default:
                    return this.style();
            }
        };
    };

    renderSelectedSeatsOfCategory = (category, seats) => {
        let $parentDiv = $('<div></div>')
            .addClass('mt-1 mb-2');
    
        $parentDiv.append($('<span></span>')
            .addClass('h6 text-muted')
            .text(`${category} Seats`)
        );
    
        let $seatRow = $('<div></div>')
            .addClass('row-small-margin row mt-2')
            .appendTo($parentDiv);
    
        for (let i = 0; i < seats.length; i++) {
            var $seatCol = $('<div></div>')
                .addClass('col-small-margin col-auto mb-2')
                .appendTo($seatRow);
    
            var $card = $('<div></div>')
                .addClass('card')
                .appendTo($seatCol);
    
            var $cardBody = $('<div></div>')
                .addClass('card-body py-2 px-3')
                .appendTo($card);
    
            $cardBody.append($('<span></span>')
                .addClass('h6')
                .text(seats[i].settings.id)
            );
        }
    
        return $parentDiv;
    };
</script>

<%- include('../templates/footer')-%>