<%- include('../templates/head')-%>

<body>
    <%- include('../templates/navbar')-%>
    <div class="container">
        <!-- Always enclose everything in a container  -->
        <main role="main" class="inner cover">
            <!-- Idk what this element does but every tutorial uses it so eh might as well use it  -->

            <div class="mt-6"></div> <!-- Used for spacing between sections  -->
            <!-- Static card section  -->
            <!-- Heading  -->
            <div class="row">
                <!-- BTW, rows are used to create responsive columns but I'm guessing yall already know that. But if you don't, better learn the bootstrap grid system cause we're gonna use it a lot.  -->
                <div class="col-sm-6">
                    <h2 id="nameHeading" class="section-heading text-primary"><%= event.name %></h2>
                    <h5 id="startDateTimeHeading"><%= moment(event.startDateTime).format('Do MMMM YYYY') %> â€¢ <%= moment(event.startDateTime).format('h:mm a') %></h5>
                </div>
                <!-- Select (combo box) Input Card  -->
                <div class="col-sm-6 mt-2">
                    <div class="card input-card">
                        <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                        <div class="card-body input-card-body">
                            <label for="searchReservationInput" class="card-input-label">
                                <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                <small class="card-subtitle mb-2 text-secondary font-weight-normal">Search
                                    Reservation</small>
                                <!-- The small element is where we actually write down what the input does  -->
                            </label>
                            <input id="searchReservationInput" name="searchReservationInput" class="form-control card-input" type="text"
                                placeholder="E.g. 91864675 ">
                            <!-- This is where the user actually inputs all their stuff  -->
                        </div>
                    </div>
                </div>
            </div>

            <div class="mt-6"></div> <!-- Used for spacing between sections  -->
            <!-- Content  -->
            <h3 id="venueNameHeading"><%= event['Venue.name'] %></h3>
            <div class="row mt-3">
                <div class="col-sm-6 col-8 mt-3">
                    <!-- Used for spacing between sections  -->
                    <div class="card input-card">
                        <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                        <div class="card-body input-card-body">
                            <label for="testSelectInput" class="card-input-label">
                                <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                <small class="card-subtitle mb-2 text-secondary font-weight-normal">Zoom</small>
                                <!-- The small element is where we actually write down what the input does  -->
                            </label>
                            <select id="zoomQuadrantSelect" class="form-control card-input" id="testSelectInput" name="testSelectInput">
                                <!-- This is where the user actually inputs all their stuff  -->
                                <option value="whole">Whole Venue</option>
                                <option value="topLeft">Top Left</option>
                                <option value="topRight">Top Right</option>
                                <option value="bottomLeft">Bottom Left</option>
                                <option value="bottomRight">Bottom Right</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            <div id="seatChartCard" class="card mt-3"> <!-- Put interactible elements in a card, enclosed with card-body  -->
                <div class="card-body">
                    <div id="tableWrapper" class="seatCharts-wrapper"> <!-- Seat maps should be ensclosed in a seat chart wrapper -->
                        <div id="seatMap" class="seatCharts-container"> <!-- This is the element the seat chart is gonna latch itself onto -->
                            <div class="front-indicator">Front</div> <!-- The seat chart element should also contain the front indicator so the user knows the orientation of the map -->
                        </div>
                    </div>
                </div>
            </div>
            <div id="legend" class="seatCharts-legend row">
            </div>
            <% if (event.seatsPerReservation !== null) { %>
            <div class="text-secondary mt-3 text-break">
                <span><%= event.seatsPerReservation %> seats per reservation</span>
            </div>
            <% } %>

            <form id="reserveSeatForm" action="/" method="post">
                <div class="mt-6"></div> <!-- Used for spacing between sections  -->
                <h3>Reservation</h3>
                <div class="row">
                    <!-- BTW, rows are used to create responsive columns but I'm guessing yall already know that. But if you don't, better learn the bootstrap grid system cause we're gonna use it a lot.  -->
                    <div class="col-sm-6">
                        <div class="card input-card mt-3">
                            <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="reservationNameInput" class="card-input-label">
                                    <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle mb-2 text-secondary font-weight-normal">Name</small>
                                    <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <input id="reservationNameInput" name="reservationNameInput" class="form-control card-input" type="text"
                                    placeholder="e.g. Lam En Qing">
                                <!-- This is where the user actually inputs all their stuff  -->
                            </div>
                        </div>
                    </div>
                    <!-- Select (combo box) Input Card  -->
                    <div class="col-sm-6">
                        <div class="card input-card mt-3">
                            <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="reservationPhoneNumberInput" class="card-input-label">
                                    <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle mb-2 text-secondary font-weight-normal">Phone Number</small>
                                    <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <input id="reservationPhoneNumberInput" name="reservationPhoneNumberInput" class="form-control card-input" type="tel" placeholder="e.g. 95179116">
                                <!-- This is where the user actually inputs all their stuff  -->
                            </div>
                        </div>
                    </div>
                </div>
                <div class="mt-4"></div>
                <button id="reserveSeatButton" type="submit" class="btn btn-lg btn-primary responsive-float w-100">Reserve Seats</button>
            </form>
            <div id="waitingListContainer" class="d-none">
                <div class="mt-6"></div>
                <h3>Waiting List</h3>
                <div class="mt-4"></div> <!-- Used for spacing between section heading and content  -->
                <!-- Content  -->
                <div class="card mt-3"> <!-- Put interactible elements in a card, enclosed with card-body  -->
                    <div class="card-body p-0">  <!-- We set the card's padding to 0 cause we want the table's edges to be flush with the table  -->
                        <!-- Table  -->
                        <div class="table-responsive">
                            <table class="table table-hover table-click table-lg"> 
                                <thead>
                                    <tr>
                                        <th scope="col">Name</th>
                                        <th scope="col">Phone No.</th>
                                        <th scope="col">No. of additional guests</th>
                                        <th scope="col">Date</th>
                                        <th scope="col">Time</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td class="font-weight-medium">Lam En Qing</td>
                                        <td class="font-weight-medium"><a href="#">90616192</a></td>
                                        <td class="font-weight-medium">2</td>
                                        <td class="font-weight-medium">18th April 2021</td>
                                        <td class="font-weight-medium">9am</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal fade" id="seatDetailsModal" tabindex="-1" role="dialog" aria-labelledby="seatDetailsModal" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <!-- This is where you enter the title of the modal -->
                        <!-- This is the actual content (can put anything here) -->
                        <div class="modal-body">
                            <div class="d-flex">
                                <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                                <div id="seatDetailsSeatCell" class="seatCharts-seat seatCharts-cell available" style="height: 50px; width: 50px;"></div>    
                                <div class="ml-3">
                                    <span id="seatDetailsId" class="align-self-center h4"></span>
                                    <br>
                                    <span id="seatDetailsDescription" class="align-self-center"></span>
                                </div>                       
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal fade" id="reservationDetailsModal" tabindex="-1" role="dialog" aria-labelledby="reservationDetailsModal" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-body">
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                            <div class="row">
                                <div class="col-5 mb-3 pl-0">
                                    <span id="reservationConfirmName" class="h2 text-primary text-break-hyphen"></span><br>
                                    <span id="reservationConfirmPhNo" class="h5 text-break-hyphen"></span>
                                </div>
                                <div class="col-7 pr-0">
                                    <div id="selectedSeatConfirmationWrapper" class="mb-3">
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button id="confirmReservationButton" type="button" class="btn btn-lg btn-primary responsive-float w-100">Confirm Reservation</button>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>
</body>

<script>
    const helperId = <%= user.id %>;
    const eventId = <%= event.id %>;

    const nameHeading = '#nameHeading';
    const startDateTimeHeading = '#startDateTimeHeading';
    const searchReservationInput = '#searchReservationInput';
    const venueNameHeading = '#venueNameHeading';
    const zoomQuadrantSelect = '#zoomQuadrantSelect';
    const venueSelectInput = '#venueSelectInput';
    const seatChartCard = '#seatChartCard';
    const tableWrapper = '#tableWrapper';
    const seatMap = '#seatMap';
    const legend = '#legend';
    const reserveSeatForm = '#reserveSeatForm';
    const reservationNameInput = '#reservationNameInput';
    const reservationPhoneNumberInput = '#reservationPhoneNumberInput';
    const reserveSeatButton = '#reserveSeatButton';
    const seatDetailsModal = '#seatDetailsModal';
    const seatDetailsSeatCell = '#seatDetailsSeatCell';
    const seatDetailsSeatId = '#seatDetailsId';
    const seatDetailsDescription = '#seatDetailsDescription';
    const waitingListContainer = '#waitingListContainer';
    const reservationDetailsModal = '#reservationDetailsModal';
    const reservationConfirmName = '#reservationConfirmName';
    const reservationConfirmPhNo = '#reservationConfirmPhNo';
    const selectedSeatConfirmationWrapper = '#selectedSeatConfirmationWrapper';
    const confirmReservationButton = '#confirmReservationButton';

    const selectableLegendClasses = 'card-hover text-primary font-weight-medium py-2 px-1';

    let event;

    // Seat chart configuration
    let activeMap;

    const colLabels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40];
    const rowLabels = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','AA','BB','CC','DD','EE','FF','GG','HH','JJ','KK','LL','MM','NN','OO'];

    let sc = {};

    sc.map = [];

    sc.seats = {};

    sc.naming = {
        rows: rowLabels,
        getLabel: function (character, row, column) {
            return row + ':' + column;
        },
        getId: function (character, row, column) {
            return row + ':' + column;
        }
    };

    sc.legend = {
        node: $(legend),
        items: []				
    };

    sc.click = function () {
        switch (this.status()) {
            case 'available':
                return 'selected';
            case 'selected':
                return 'available';
            case 'reserved':
                populateSeatDetailsModal(this.settings.id, "Lam En Qing", this.settings.data.classes);
                return 'reserved';
            case 'blocked':
                populateSeatDetailsModal(this.settings.id, `Blocked for ${this.settings.data.category}`, this.settings.data.classes);
                return 'blocked';
            default:
                return this.style();
        }
    };

    // Rest of the functions
    $(document).ready(async function() {
        try {
            event = await getEventDetailsForHelper(eventId, helperId);
        } catch (error) {
            return handleError(error);
        }

        sc.map = event.seatMap;
        sc.seats = getSeatsObject(event.seatTypes);
        sc.legend.items = getLegendArray(sc.seats);

        activeMap = bindMap(sc, seatMap);
        scaleContentWidth(tableWrapper, seatMap);
        disableBlockedSeats(activeMap, sc.seats);
        disableReservedSeats(activeMap, event.reservedSeats);
    });

    $(window).resize(function() { // Upon resizing the browser window, the scaling function is called to make sure the seat chart fits within the new dimensions of the parent container
        scaleContentWidth(tableWrapper, seatMap);
    });

    $(searchReservationInput).change(function() {
        activeMap.find('reserved').status('highlighted');
    });

    $(zoomQuadrantSelect).change(function() {
        sc.map = Array.from(event.seatMap);

        const dimensions = getQuadrantDimensions(sc.map, $(zoomQuadrantSelect).val());

        sc.map = spliceMapRow(sc.map, dimensions[0][0], dimensions[0][1]);
        sc.map = spliceMapCol(sc.map, dimensions[1][0], dimensions[1][1]);

        sc.naming.rows = rowLabels.slice(dimensions[0][0], dimensions[0][1]);
        sc.naming.columns = colLabels.slice(dimensions[1][0], dimensions[1][1]);

        activeMap = reloadMap(sc, tableWrapper, seatMap, legend);
        disableBlockedSeats(activeMap, sc.seats);
        disableReservedSeats(activeMap, event.reservedSeats);
    });

    $(reserveSeatForm).submit(async function (event) {
        event.preventDefault();
        const reservationNameInputVal = $(reservationNameInput).val();
        const reservationPhoneNumberInputVal = $(reservationPhoneNumberInput).val();
        const selectedSeats = activeMap.find('selected');

        if (selectedSeats.length == 0) {
            return showDangerToast("Please select some seats to reserve for the attendee!");
        }

        if (reservationNameInputVal === "") {
            return showDangerToast("Please enter a name for the attendee!");
        }

        if (reservationPhoneNumberInputVal == "") {
            return showDangerToast("Please enter a phone number for the attendee!");
        }

        const sortedSeats = selectedSeats.seats.reduce((sortedSeats, seat) => ({
            ...sortedSeats,
            [seat.settings.data.category]: [...(sortedSeats[seat.settings.data.category] || []), seat]
        }), {});

        $(selectedSeatConfirmationWrapper).empty();
        $(reservationConfirmName).text(reservationNameInputVal);
        $(reservationConfirmPhNo).text(reservationPhoneNumberInputVal);
        for (const category in sortedSeats) {
            $(selectedSeatConfirmationWrapper).append(renderSelectedSeatConfirmationNode(category, sortedSeats[category]));
        }

        $(reservationDetailsModal).modal();
    });

    $(confirmReservationButton).click(async function() {
        $(confirmReservationButton).prop('disabled', true);
        const reservationNameInputVal = $(reservationNameInput).val();
        const reservationPhoneNumberInputVal = $(reservationPhoneNumberInput).val();
        const selectedSeats = activeMap.find('selected');

        let attendee;
        
        try {
            attendee = await createEventAttendee(reservationNameInputVal, reservationPhoneNumberInputVal, eventId);
            for (let i = 0; i < selectedSeats.seatIds.length; i++) {
                await createEventSeatReservation(selectedSeats.seatIds[i], eventId, attendee.id);
            }
        } catch (error) {
            $(confirmReservationButton).prop('disabled', false);
            return handleError(error);
        }

        try {
            await sendReservationConfirmSMS(attendee.id);
            await flashSuccess("Successfully created a new reservation!");
        } catch (error) {
            await flashError("Something went wrong while sending the confirmation message to the attendee! Please provide them with their reservation details manually.");
        } finally {
            $(window).unbind('beforeunload');
            window.location.reload();
        }
    });

    populateSeatDetailsModal = (seatId, description, cssClasses) => {
        $(seatDetailsSeatId).text(seatId);
        $(seatDetailsDescription).text(description);
        $(seatDetailsSeatCell)
            .removeClass()
            .addClass('seatCharts-seat seatCharts-cell available')
            .addClass(cssClasses);
            
        $(seatDetailsModal).modal();
    };

    getLegendArray = (seats) => {
        let legends = Object.keys(seats).reduce(function(legends, char) {
            if (!seats[char].blocked){
                legends.push([char, "available", seats[char].category]);
            }
            return legends;
        }, []);
        legends.push(["G", "blocked", "Blocked"]);
        return legends;
    };

    getQuadrantDimensions = (quadrant) => {
		if (sc.map.length == 0) {
			return throwException("The given map has no rows!");
		}

		if (sc.map[0].length == 0) {
			return throwException("The given map has no columns!");
		}

		const rowStart = 0;
		const colStart = 0;
		const rowMid = Math.floor(sc.map.length / 2);
		const colMid = Math.floor(sc.map[0].length / 2);
		const rowEnd = sc.map.length;
		const colEnd = sc.map[0].length;

		switch (quadrant) {
			case "whole":
				return [[rowStart, Math.max(1, rowEnd)], [colStart, Math.max(1, colEnd)]];
			case "topLeft":
				return [[rowStart, Math.max(1, rowMid)], [colStart, Math.max(1, colMid)]];
			case "topRight":
				return [[rowStart, Math.max(1, rowMid)], [colMid, Math.max(1, colEnd)]];
			case "bottomLeft":
				return [[rowMid, Math.max(1, rowEnd)], [colStart, Math.max(1, colMid)]];
			case "bottomRight":
				return [[rowMid, Math.max(1, rowEnd)], [colMid, Math.max(1, colEnd)]];
			default:
				return [[rowStart, Math.max(1, rowEnd)], [colStart, Math.max(1, colEnd)]];
		}
	};

    function renderSelectedSeatConfirmationNode(category, seats) {
        let $parentDiv = $('<div></div>')
            .addClass('mt-1 mb-2');

        $parentDiv.append($('<span></span>')
            .addClass('h6 text-muted')
            .text(`${category} Seats`)
        );

        let $seatRow = $('<div></div>')
            .addClass('row-small-margin row mt-2')
            .appendTo($parentDiv);

        for (let i = 0; i < seats.length; i++) {
            var $seatCol = $('<div></div>')
                .addClass('col-small-margin col-auto mb-2')
                .appendTo($seatRow);

            var $card = $('<div></div>')
                .addClass('card')
                .appendTo($seatCol);

            var $cardBody = $('<div></div>')
                .addClass('card-body py-2 px-3')
                .appendTo($card);

            $cardBody.append($('<span></span>')
                .addClass('h6')
                .text(seats[i].settings.id)
            );
        }

        return $parentDiv;
    };

</script>

<%- include('../templates/footer')-%>