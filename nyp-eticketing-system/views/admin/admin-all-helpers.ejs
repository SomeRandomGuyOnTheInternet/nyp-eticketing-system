<%- include('../templates/head')-%>

<body>
    <%- include('../templates/navbar')-%>
    <div class="container">
        <!-- Always enclose everything in a container  -->
        <main role="main" class="inner cover">
            <!-- Idk what this element does but every tutorial uses it so eh might as well use it  -->

            <div class="mt-6"></div> <!-- Used for spacing between sections  -->
            <!-- Input card section  -->
            <!-- Heading  -->
            <div class="row">
                <!-- Use this row div if you want your section heading to be inline with another element  -->
                <div class="col-sm-6 col-12 align-self-end">
                    <h2 class="section-heading">Helpers</h2>
                </div>
                <div class="col-sm-6 col-12 align-self-end">
                    <div class="card input-card w-100">
                        <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                        <div class="card-body input-card-body">
                            <div class="d-flex">
                                <div class="flex-grow-1">
                                    <label for="searchReservationInput" class="card-input-label">
                                        <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                        <small class="card-subtitle mb-2 text-secondary font-weight-normal">Search
                                            Helpers</small>
                                        <!-- The small element is where we actually write down what the input does  -->
                                    </label>
                                    <input id="searchHelperInput" name="searchHelperInput" class="form-control card-input" type="search"
                                        placeholder="E.g. Vignesh">
                                </div>
                                <button id="clearSearchHelperButton" class="d-none btn text-muted" type="button"><i class="fas fa-times"></i></button>
                                <button class="btn text-muted" disabled><i class="fas fa-search"></i></button>
                                <!-- This is where the user actually inputs all their stuff  -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Table for list of helpers -->
            <div class="mt-3"></div> <!-- Used for spacing between section heading and content  -->
            <!-- Content  -->
            <div class="card mt-3">
                <!-- Put interactible elements in a card, enclosed with card-body  -->
                <div class="card-body p-0">
                    <!-- We set the card's padding to 0 cause we want the table's edges to be flush with the table  -->
                    <!-- Table  -->
                    <div class="table-responsive">
                        <table class="table table-click table-lg">
                            <thead>
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Name</th>
                                    <th scope="col">Email</th>
                                    <th scope="col">Phone Number</th>
                                    <th scope="col">Date Created</th>
                                    <th scope="col" class="p-3"> 
                                        <button type="button" class="btn btn-primary w-100" data-toggle="modal" data-target="#Modal">
                                            <i class="fas fa-plus"></i>&nbsp;&nbsp;Add Helpers
                                        </button>
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <% for (i = 0; i < helpers.length; i++) { %>
                                <tr id="<%= helpers[i].id %>" class="helperRow">
                                    <td scope="row"><%= i + 1 %></td>
                                    <td class="font-weight-medium"><%= helpers[i].name %></td>
                                    <td><%= helpers[i].email %></td>
                                    <td><%= helpers[i].phoneNumber %></td>
                                    <td><%= moment(helpers[i].createdAt).format('Do MMMM YYYY') %></td>
                                    <td class="text-center">
                                        <form action="/api/admin/helpers/<%= helpers[i].id %>" class="deleteHelperForm">
                                            <button type="submit" class="btn btn-link p-0">
                                                <i class="fa fa-trash text-danger" style="font-size: 25px;"></i>
                                            </button>
                                        </form>
                                    </td>
                                </tr>
                                <% } %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Modal section -->
            <!-- This part will not be shown to the user until they click on the button that is supposed to launch the modal -->
            <!-- The modal should have the same id as the one you specified in the element with the data-target above -->
            <!-- Note that you can use multiple modals in one page, as long as they are all given different ids -->
            <form id="addHelperForm" method="POST">
                <div class="modal fade" id="Modal" tabindex="-1" role="dialog" aria-labelledby="testModal"
                    aria-hidden="true">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <!-- This is where you enter the title of the modal -->
                            <div class="modal-header">
                                <h4 class="modal-title text-primary" id="testModalLabel">Add Helper</h4>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <!-- This is the actual content (can put anything here) -->
                            <div class="modal-body">
                                <div class="card input-card">
                                    <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                                    <div class="card-body input-card-body">
                                        <label for="name" class="card-input-label">
                                            <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                            <small class="card-subtitle mb-2 text-secondary font-weight-normal">Name</small>
                                            <!-- The small element is where we actually write down what the input does  -->
                                        </label>
                                        <input id="name" name="name" class="form-control card-input" type="text"
                                            placeholder="e.g. Mark">
                                        <!-- This is where the user actually inputs all their stuff  -->
                                    </div>
                                </div>
                                <div class="card input-card mt-3">
                                    <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                                    <div class="card-body input-card-body">
                                        <label for="email" class="card-input-label">
                                            <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                            <small class="card-subtitle mb-2 text-secondary font-weight-normal">Email
                                                Address</small>
                                            <!-- The small element is where we actually write down what the input does  -->
                                        </label>
                                        <input id="email" name="email" class="form-control card-input" type="text"
                                            placeholder="e.g. example@mail.com">
                                        <!-- This is where the user actually inputs all their stuff  -->
                                    </div>
                                </div>
                                <div class="card input-card mt-3">
                                    <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                                    <div class="card-body input-card-body">
                                        <label for="password" class="card-input-label">
                                            <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                            <small
                                                class="card-subtitle mb-2 text-secondary font-weight-normal">Phone Number</small>
                                            <!-- The small element is where we actually write down what the input does  -->
                                        </label>
                                        <input id="phoneNumber" name="phoneNumber" class="form-control card-input" type="tel"
                                            placeholder="Enter phone number here">
                                        <!-- This is where the user actually inputs all their stuff  -->
                                    </div>
                                </div>
                                <div class="card input-card mt-3">
                                    <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                                    <div class="card-body input-card-body">
                                        <!-- This is where the user actually inputs all their stuff  -->
                                        <div class="d-flex">
                                            <div class="flex-grow-1">
                                                <label for="password" class="card-input-label">
                                                    <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                                    <small
                                                        class="card-subtitle mb-2 text-secondary font-weight-normal">Password</small>
                                                    <!-- The small element is where we actually write down what the input does  -->
                                                </label>
                                                <input id="password" name="password" class="form-control card-input" type="password" placeholder="Enter password here">
                                            </div>
                                            <button class="btn" type="button" onclick="utils.togglePasswordVisibility('password', 'toggleIcon')"><i id="toggleIcon" class="fas fa-eye"></i></button>
                                            <!-- This is where the user actually inputs all their stuff  -->
                                        </div>
                                        <div class="d-flex"> 
                                            <div class="flex-grow-1 mr-3">
                                                <div id="progressContainer" class="h-100">
                                                    <div id="progressBar">
                                                        <div></div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div id="strengthText"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- This is the footer, where you usually put buttons and stuff -->
                            <div class="modal-footer">
                                <button id="registerButton" type="submit" class="btn btn-primary btn-lg w-100">Register</button>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </main>
    </div>
</body>

<script>
    window.LoadingOverlay.show();

    const searchHelperInput = document.getElementById('searchHelperInput');
    const clearSearchHelperButton = document.getElementById('clearSearchHelperButton');
    const helperRows = document.querySelectorAll('.helperRow');
    const deleteHelperForms = document.querySelectorAll('.deleteHelperForm');
    const addHelperForm = document.getElementById('addHelperForm');
    const nameTextbox = document.getElementById('name');
    const emailTextbox = document.getElementById('email');
    const phoneNumberTextbox = document.getElementById('phoneNumber');
    const passwordTextbox = document.getElementById('password');
    const progressBar = document.getElementById('progressBar');
    const strengthText = document.getElementById('strengthText');
    const registerButton = document.getElementById('registerButton');

    let passwordStrength = 0;

    window.addEventListener("load", async function(e) {
        new autoComplete({
            data: {
                src: async () => {
                    return (await ajax.get(routes.admin.helpers)).map(helper => User.parseApiResult(helper));
                },
                key: ["name", "phoneNumber"]
            },
            trigger: {
                event: ["input", "focusin", "focusout"]
            },
            placeHolder: "e.g. Vignesh",
            selector: "#searchHelperInput",
            highlight: true,
            resultsList: {
                render: true,
            },
            resultItem: {
                content: (data, source) => {
                    source.innerHTML = `${data.match}&nbsp;•&nbsp;${(data.key === "name") ? data.value.phoneNumber : data.value.name}`;
                },
                element: "li"
            },
            onSelection: feedback => {
                document.querySelectorAll('.helperRow').forEach(obj => obj.classList.remove("table-active"));

                const selectedRow = document.getElementById(feedback.selection.value.id);
                selectedRow.classList.add("table-active");
                selectedRow.scrollIntoView({ behavior: 'smooth', block: 'end', inline: 'nearest' });

                searchHelperInput.value = feedback.selection.value.name;
            }
        });
        
        window.LoadingOverlay.hide();
    });
    
    searchHelperInput.addEventListener('keyup', function (e) {
        if (e.target.value.length === 0) document.querySelectorAll('.helperRow').forEach(obj => obj.classList.remove("table-active"));
        clearSearchHelperButton.classList.toggle('d-none', e.target.value.length === 0);
    });


    clearSearchHelperButton.addEventListener('click', function (e) {
        document.querySelectorAll('.helperRow').forEach(obj => obj.classList.remove("table-active"));
        searchHelperInput.value = '';
        clearSearchHelperButton.classList.add('d-none');
    });

    passwordTextbox.addEventListener('keyup', function(e) {
        const result = zxcvbn(e.target.value);
        passwordStrength = result.score;
        adjustStrengthMeter(passwordStrength);

        if (e.target.value === "") {
            clearMeter();
        }
    });

    deleteHelperForms.forEach(function(element) {
        element.addEventListener('submit', async function (e) {
            e.preventDefault();

            const check = confirm("Are you sure you want to delete this helper account?");
            if (check === true) {
                try {
                    await ajax.delete(e.target.action);
                    await ajax.post(routes.notification.success, "Helper account has been deleted successfully!");

                    window.location.replace('/admin/helpers');
                } catch (error) {
                    utils.handleError(error);
                }
            }
        });
    });

    addHelperForm.addEventListener('submit', async function (e) {
        e.preventDefault();

        if (passwordStrength < 2) return toast.flash.danger("Please enter a stronger password!");

        registerButton.disabled = true;

        try {
            await ajax.post(routes.admin.helpers, {
                name: nameTextbox.value, 
                email: emailTextbox.value,
                phoneNumber: phoneNumberTextbox.value,
                password: passwordTextbox.value
            });
            await ajax.post(routes.notification.success, "Helper account has been created successfully!");

            utils.removeUnloadListener();
      
            window.location.replace("/admin/helpers");
        } catch (error) {
            utils.handleError(error);
        } finally {
            registerButton.disabled = false;
        }
    });

    adjustStrengthMeter = (score) => {
        const percentage = (score * 20) + 20;
        indicateStrength(passwordMeterConfig.strengthText[score]);
        progressBar.setAttribute("style", "visibility: visible;" + "width: " + percentage + "%;" + "height: 100%; border-radius: 0.25rem;" + "background-color: " + passwordMeterConfig.color[score]);
    };

    clearMeter = () => {
        progressBar.setAttribute("style","visibility: none;");
    };

    indicateStrength = (str) => {
        strengthText.innerHTML = str;
        strengthText.setAttribute("style", "visibility: visible; font-weight: 500;");
    };
</script>

<%- include('../templates/footer')-%> -->