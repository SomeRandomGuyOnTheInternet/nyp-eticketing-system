<%- include('../templates/head')-%>
<body>
    <%- include('../templates/navbar')-%>
    <div class="container"> <!-- Always enclose everything in a container  -->
        <main role="main" class="inner cover"> <!-- Idk what this element does but every tutorial uses it so eh might as well use it  -->

            <div class="mt-6"></div> <!-- Used for spacing between sections  -->
            <!-- Venue details form section  -->
            <!-- Heading  -->
            <h2 class="section-heading">Venue Details</h2>
            <div class="mt-3"></div>

            <form id="updateVenueForm" action="/api/update-venue" method="post">
                <div class="row"> <!-- BTW, rows are used to create responsive columns but I'm guessing yall already know that. But if you don't, better learn the bootstrap grid system cause we're gonna use it a lot.  -->
                    <!-- Venue Name Input Card  -->
                    <div class="col-md-6">
                        <div class="card input-card mt-3"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="nameInput" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle text-secondary font-weight-normal">Venue Name</small> <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <input id="nameInput" name="nameInput" class="form-control card-input" type="text" value="<%- venue.name %>" placeholder="e.g. Block A"> <!-- Note that the name attribute is required to get textbox values from the backend. It should have the same value as the id.  --> 
                            </div>
                        </div>
                    </div>
                </div>

                <div class="mt-6"></div> <!-- Used for spacing between sections  -->
                <!-- Seat chart card section  -->
                <!-- Heading  -->
                <h2 class="section-heading">Seat Chart</h2>
                <div class="mt-3"></div> <!-- Used for spacing between section heading and content  -->
                <!-- Content  -->
                <div class="row">
                    <div class="col-md-3 col-6">
                        <!-- Column Input Card  -->
                        <div class="card input-card mt-3"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="columnInput" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle text-secondary font-weight-normal">Columns</small> <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <input id="columnInput" name="columnInput" class="form-control card-input" type="number" value="6" min="1" max="40" placeholder="e.g. 10">
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3 col-6">
                        <!-- Row Input Card  -->
                        <div class="card input-card mt-3"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="rowInput" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle text-secondary font-weight-normal">Rows</small> <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <input id="rowInput" name="rowInput" class="form-control card-input" type="number" value="4" min="1" max="40" placeholder="e.g. 7">
                            </div>
                        </div>
                    </div>
                </div>

                <div id="seatChartCard" class="card mt-3"> <!-- Put interactible elements in a card, enclosed with card-body  -->
                    <div class="card-body">
                        <div id="tableWrapper" class="seatCharts-wrapper"> <!-- Seat maps should be ensclosed in a seat chart wrapper -->
                            <div id="seatMap" class="seatCharts-container"> <!-- This is the element the seat chart is gonna latch itself onto -->
                                <div class="front-indicator">Front</div> <!-- The seat chart element should also contain the front indicator so the user knows the orientation of the map -->
                            </div>
                        </div>
                    </div>
                </div>
                <div id="legend" class="seatCharts-legend row"> <!-- This is the element that the legends are gonna attach themselves to -->
                </div>
                <div class="mt-6"></div> <!-- Used for spacing between sections  -->
                <div class="row">
                    <div class="col-sm-6 mb-2">
                        <button id="cancelEditedVenueButton" class="btn btn-warning btn-lg w-100" type="button">Cancel</button>
                    </div>
                    <div class="col-sm-6">
                        <button id="saveEditedVenueButton" class="btn btn-primary btn-lg w-100" type="submit">Save Changes</button>
                    </div>
                </div>
            </form>
        </main>
    </div>
</body>

<script>
    window.LoadingOverlay.show();

    const venueId = <%- venue.id %>;

    // Declare all the ids of the various html elements we're gonna manipulate as variables so referencing them in js is easier
    const updateVenueForm = document.getElementById('updateVenueForm');
    const nameInput = document.getElementById('nameInput');
    const columnInput = document.getElementById('columnInput');
    const rowInput = document.getElementById('rowInput');
    const mapWrapper = document.getElementById('tableWrapper');
    const seatMap = document.getElementById('seatMap');
    const legend = document.getElementById('legend');
    const deleteVenueButton = document.getElementById('deleteVenueButton');
    const saveEditedVenueButton = document.getElementById('saveEditedVenueButton');
    const cancelEditedVenueButton =  document.getElementById('cancelEditedVenueButton');

    // Declare the default seat type characters over here
    const defaultSeat = "G";
    const emptySpace = "_"; // The actual empty space character (_) creates a seat cell that cannot be interacted with
    const tempEmptySpace = "E"; // We have to use a temporary character (E) that can be interacted with to denote empty space while the user is editing the seat map
    // We will convert the temporary characters in the map to the actual empty space character when we're submitting the seat map

    const selectableLegendClasses = 'text-primary clickable-div card-hover font-weight-medium'; // These are the css class belonging to legends that can be clicked on by the user

    let selectedSeatType; // This variable will contain the character of the seat type the user's selected

    let lastSelectedSeat = null;
    let shiftHeld = false;

    let venue = new Venue({});

    let sc = new SeatChart({
        map: [],
        seatTypes: [
            new SeatType({ char: defaultSeat, category: 'General', blocked: false, classes: 'general' }),
            new SeatType({ char: tempEmptySpace, category: 'Empty Space', blocked: false, classes: 'temp-space' })
        ],
        legends: [                
            [defaultSeat, 'seat-legend-icon add-seat-legend-icon', 'Add Seat', selectableLegendClasses],
            [tempEmptySpace, 'seat-legend-icon remove-seat-legend-icon', 'Remove Seat', selectableLegendClasses]
        ],
        rowLabels: SeatChart.alphabeticalLabels(),
        columnLabels: SeatChart.undefinedLabels(),
        mapNode: seatMap,
        wrapperNode: mapWrapper,
        legendNode: legend,
    });

    sc.onClick = function () {
        if (shiftHeld === true && lastSelectedSeat !== null) {
            const seats = sc.activeNode.seats;
            const firstSeat = [this, lastSelectedSeat].reduce((prev, curr) => ((1 + prev.settings.row) * (1 + prev.settings.column)) < ((1 + curr.settings.row) * (1 + curr.settings.column)) ? prev : curr);
            const lastSeat = [this, lastSelectedSeat].reduce((prev, curr) => ((1 + prev.settings.row) * (1 + prev.settings.column)) > ((1 + curr.settings.row) * (1 + curr.settings.column)) ? prev : curr);
            let replaceSeats = false;

            for (const id in seats) {
                if (id === firstSeat.settings.id) replaceSeats = true;
                if (replaceSeats === true)  sc.replaceMapSeat(seats[id], selectedSeatType);
                if (id === lastSeat.settings.id) break;
            }
        } else {
            sc.replaceMapSeat(this, selectedSeatType);
        }

        lastSelectedSeat = this;
    };

    // Rest of the functions
    window.addEventListener("load", async function(e) {
        try {
            const fetchedVenue = await ajax.get(`${routes.admin.venues}/${venueId}`);
            venue.id = fetchedVenue.id;
            venue.name = fetchedVenue.name;
            venue.seatMap = JSON.parse(fetchedVenue.seatMap);
        } catch (error) {
            return utils.handleError(error);
        }

        sc.map = venue.seatMap;
        sc.replaceMapSeatCharacters(emptySpace, tempEmptySpace); // Convert empty space characters to a temporary character that can be interacted with
        sc.bindMap();
        sc.scaleContentWidth();

        columnInput.value = sc.map[0].length;
        rowInput.value = sc.map.length;

        window.LoadingOverlay.hide();
    });

    window.addEventListener('resize', function (e) { // Upon resizing the browser window, the scaling function is called to make sure the seat chart fits within the new dimensions of the parent container
        sc.scaleContentWidth();
    });

    window.addEventListener('keydown', function (e) {
        if (e.keyCode === 16) shiftHeld = true;
    });

    window.addEventListener('keyup', function (e) {
        if (e.keyCode === 16) shiftHeld = false;
    });

    [rowInput, columnInput].forEach(function(element) {
        element.addEventListener('change', function (e) {
            utils.addUnloadListener();

            const columnVal = columnInput.value;
            const rowVal = rowInput.value;

            if (isNaN(columnVal) || isNaN(rowVal)) return toast.flash.danger("Please enter a valid value!");

            const columns = Number(columnVal);
            const rows = Number(rowVal);

            if (columns < 1 || rows < 1) return toast.flash.danger("Please enter a larger value!");
            if (columns > 40 || rows > 40) return toast.flash.danger("Please enter a smaller value!");

            if (e.target.id === rowInput.id) sc.resizeRows(columns, rows); // Changes number of columns
            if (e.target.id === columnInput.id) sc.resizeColumns(columns, rows); // Changes number of rows

            sc.reloadMap(); // Reloads the map with the updated map
        });
    });

    document.addEventListener('click', function (e) {
        if (!e.target.classList.contains('seatCharts-legendCard')) return;

        const node = e.target;
        const seatCharAttr = node.getAttribute("data-seat-character");
        const highlighted = node.classList.contains("highlighted");

        document.querySelectorAll(".seatCharts-legendCard").forEach(obj => obj.classList.remove("highlighted"));

        if (seatCharAttr) {
            node.classList.add((highlighted) ? null : "highlighted");
            selectedSeatType = (highlighted) ? null : seatCharAttr;
        }
    }, false);

    cancelEditedVenueButton.addEventListener('click', async function (e) {
        const check = confirm("Are you sure you want to cancel updating this venue's details?");
        
        if (check === true) {
            utils.removeUnloadListener();
            window.location.replace('/admin/venues');
        }
    });

    updateVenueForm.addEventListener('submit', async function (e) {
        e.preventDefault();
        saveEditedVenueButton.disabled = true;

        sc.replaceMapSeatCharacters(tempEmptySpace, emptySpace);

        venue.name = nameInput.value;
        venue.seatMap = sc.map;
        
        try {
            await ajax.update(`${routes.admin.venues}/${venueId}`, venue);

            toast.flash.success("Venue has been updated successfully!");
            utils.removeUnloadListener();
        } catch (error) {
            utils.handleError(error);
        } finally {
            saveEditedVenueButton.disabled = false;
        }
    });
</script>

<%- include('../templates/footer')-%>