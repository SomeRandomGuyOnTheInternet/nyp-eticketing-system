<%- include('../templates/head')-%>
<body>
    <%- include('../templates/navbar')-%>
    <div class="container"> <!-- Always enclose everything in a container  -->
        <main role="main" class="inner cover"> <!-- Idk what this element does but every tutorial uses it so eh might as well use it  -->

            <div class="mt-6"></div> <!-- Used for spacing between sections  -->
            <!-- Static card section  -->
            <!-- Heading  -->
            <h2 class="section-heading">Button Card Heading</h2>
            <div class="mt-0"></div> <!-- Used for spacing between section heading and content  -->
            <!-- Content  -->
            <div class="row"> <!-- BTW, rows are used to create responsive columns but I'm guessing yall already know that. But if you don't, better learn the bootstrap grid system cause we're gonna use it a lot.  -->
                <div class="col-md-3">
                    <div class="card card-hover mt-3"> <!-- All clickable cards should have hover-card class  -->
                        <div class="card-body text-center">
                            <span class="h5 text-primary">Auth</span>
                            <a href="#" class="stretched-link"></a> <!-- Stretched links enable us to make its parent div a clickable link in a non-intrusive way -->
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card card-hover mt-3"> <!-- All clickable cards should have hover-card class  -->
                        <div class="card-body text-center">
                            <span class="h5 text-primary">Helper</span>
                            <a href="/helper/" class="stretched-link"></a> <!-- Stretched links enable us to make its parent div a clickable link in a non-intrusive way -->
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card card-hover mt-3"> <!-- All clickable cards should have hover-card class  -->
                        <div class="card-body text-center">
                            <span class="h5 text-primary">Planner</span>
                            <a href="/planner/events" class="stretched-link"></a> <!-- Stretched links enable us to make its parent div a clickable link in a non-intrusive way -->
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card card-hover mt-3"> <!-- All clickable cards should have hover-card class  -->
                        <div class="card-body text-center">
                            <span class="h5 text-primary">Admin</span>
                            <a href="/admin/" class="stretched-link"></a> <!-- Stretched links enable us to make its parent div a clickable link in a non-intrusive way -->
                        </div>
                    </div>
                </div>
            </div>

            <div class="mt-6"></div> <!-- Used for spacing between sections  -->
            <!-- Static card section  -->
            <!-- Heading  -->
            <h2 class="section-heading">Test Card Heading</h2>
            <div class="mt-4"></div> <!-- Used for spacing between section heading and content  -->
            <!-- Content  -->
            <div class="card mt-3"> <!-- Put interactible elements in a card, enclosed with card-body  -->
                <div class="card-body">
                    <span>This is a test. It works. Yay.</span>
                </div>
            </div>

            <div class="mt-6"></div> <!-- Used for spacing between sections  -->
            <!-- Input card section  -->
            <!-- Heading  -->
            <div class="row"> <!-- Use this row div if you want your section heading to be inline with another element  -->
                <div class="col-sm-9 col-12 align-self-end">
                    <h2 class="section-heading">Test Input Card Heading</h2>
                </div>
                <div class="col-sm-3 col-12 align-self-end">
                    <button type="button" class="btn btn-lg btn-primary responsive-float float-right">Test Button</button>
                </div>
            </div>
            <div class="mt-0"></div> <!-- This spacing is different from the rest cause having multiple inline elements in the heading kinda screws up the spacing, so have to set it to zero to make it look consistent with the rest -->
            <!-- Content  -->
            <!-- Text Box Input Card  -->
            <div class="row"> <!-- BTW, rows are used to create responsive columns but I'm guessing yall already know that. But if you don't, better learn the bootstrap grid system cause we're gonna use it a lot.  -->
                <div class="col-sm-6">
                    <div class="card input-card mt-3"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                        <div class="card-body input-card-body">
                            <label for="textTextInput" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                <small class="card-subtitle text-secondary font-weight-normal">Example Text Box</small> <!-- The small element is where we actually write down what the input does  -->
                            </label>
                            <input id="textTextInput" class="form-control card-input" type="text" placeholder="This is an example text box woo"> <!-- This is where the user actually inputs all their stuff  -->
                        </div>
                    </div>
                </div>
                <!-- Select (combo box) Input Card  -->
                <div class="col-sm-6">
                    <div class="card input-card mt-3"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                        <div class="card-body input-card-body">
                            <label for="testSelectInput" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                <small class="card-subtitle text-secondary font-weight-normal">Example Select</small> <!-- The small element is where we actually write down what the input does  -->
                            </label>
                            <select class="form-control card-input" id="testSelectInput"> <!-- This is where the user actually inputs all their stuff  -->
                                <option>1</option>
                                <option>2</option>
                                <option>3</option>
                                <option>4</option>
                                <option>5</option>
                            </select>
                        </div>
                    </div>
                </div>
                <!-- Checkmark (check) Input Card w/ Label  -->
                <div class="col-sm-6">
                    <div class="card input-card mt-3"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                        <div class="card-body input-card-body">
                            <label for="testLabelCheckForm" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                <small class="card-subtitle text-secondary font-weight-normal">Example Labelled Checkboxes</small> <!-- The small element is where we actually write down what the input does  -->
                            </label>
                            <div id="testLabelCheckForm" class="py-2"> <!-- All check input elements should be enclosed in a div with a unique id  -->
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="checkbox" name="testLabelCheck1" id="testLabelCheck1" value="testValue1">
                                    <label class="form-check-label px-2" for="testLabelCheck1">
                                        Checkbox 1
                                    </label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="checkbox" name="testLabelCheck2" id="testLabelCheck2" value="testValue2">
                                    <label class="form-check-label px-2" for="testLabelCheck2">
                                        Checkbox 2
                                    </label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="checkbox" name="testLabelCheck3" id="testLabelCheck3" value="testValue3">
                                    <label class="form-check-label px-2" for="testLabelCheck3">
                                        Checkbox 3
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Checkmark (check) Input Card w/o Label  -->
                <div class="col-sm-6">
                    <div class="card input-card mt-3">
                        <div class="card-body no-label-card-body">
                            <div id="testCheckForm">
                                <div class="form-check form-check-inline ml-2">
                                    <input class="form-check-input lg-check" type="checkbox" name="testCheck1" id="testCheck1" value="testValue1">
                                    <label class="form-check-label px-3" for="testCheck1">
                                        Large Unlabelled Checkbox
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="mt-6"></div> <!-- Used for spacing between sections  -->
            <!-- Table card card section  -->
            <!-- Heading  -->
            <h2 class="section-heading">Test Table Card Heading</h2>
            <div class="mt-4"></div> <!-- Used for spacing between section heading and content  -->
            <!-- Content  -->
            <div class="card mt-3"> <!-- Put interactible elements in a card, enclosed with card-body  -->
                <div class="card-body p-0">  <!-- We set the card's padding to 0 cause we want the table's edges to be flush with the table  -->
                    <!-- Table  -->
                    <div class="table-responsive">
                        <table class="table table-hover table-click table-lg"> 
                            <thead>
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Name</th>
                                    <th scope="col">Venue</th>
                                    <th scope="col">Date & Time</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <th scope="row">1</th>
                                    <td class="font-weight-medium"><a href="#">SIT Graduation Ceremony</a></td>
                                    <td>Auditorium</td>
                                    <td>18th April 2020, 9am</td>
                                </tr>
                                <tr>
                                    <th scope="row">2</th>
                                    <td class="font-weight-medium"><a href="#">SBM Graduation Ceremony</a></td>
                                    <td>Auditorium</td>
                                    <td>18th April 2020, 1pm</td>
                                </tr>
                                <tr>
                                    <th scope="row">3</th>
                                    <td class="font-weight-medium"><a href="#">SIDM Graduation Ceremony</a></td>
                                    <td>Auditorium</td>
                                    <td>18th April 2020, 5pm</td>
                                </tr>
                                <tr>
                                    <th scope="row">4</th>
                                    <td class="font-weight-medium"><a href="#">Guitar Club Presents: Steel Cords & Mellow Chords</a></td>
                                    <td>Theatre for the Arts</td>
                                    <td>21st April 2020, 4pm</td>
                                </tr>
                                <tr>
                                    <th scope="row">5</th>
                                    <td class="font-weight-medium"><a href="#">Drama Club Presents: Shrek on Ice!</a></td>
                                    <td>Theatre for the Arts</td>
                                    <td>22nd April 2020, 6pm</td>
                                </tr>
                                <tr>
                                    <th scope="row">6</th>
                                    <td class="font-weight-medium"><a href="#">Martial Arts Night</a></td>
                                    <td>Theatre for the Arts</td>
                                    <td>24th April 2020, 7pm</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <div class="mt-6"></div> <!-- Used for spacing between sections  -->
            <!-- Seat chart card section  -->
            <!-- Heading  -->
            <h2 class="section-heading">Test Seat Chart Heading</h2>
            <div class="mt-4"></div> <!-- Used for spacing between section heading and content  -->
            <!-- Content  -->
            <div id="table-card" class="card mt-3"> <!-- Put interactible elements in a card, enclosed with card-body  -->
                <div class="card-body">
                    <div id="table-wrapper" class="seatCharts-wrapper"> <!-- Seat maps should be ensclosed in a seat chart wrapper -->
                        <div id="seat-map" class="seatCharts-container"> <!-- This is the element the seat chart is gonna latch itself onto -->
                            <div class="front-indicator">Front</div> <!-- The seat chart element should also contain the front indicator so the user knows the orientation of the map -->
                        </div>
                    </div>
                </div>
            </div>
            <div id="legend" class="seatCharts-legend"></div>

            <div class="mt-6"></div> <!-- Used for spacing between sections  -->
            <!-- Modal button section  -->
            <!-- Heading  -->
            <h2 class="section-heading">Test Modal Heading</h2>
            <div class="mt-4"></div> <!-- Used for spacing between section heading and content  -->
            <!-- Content  -->
            <div id="table-card" class="card mt-3"> <!-- Put interactible elements in a card, enclosed with card-body  -->
                <div class="card-body">
                    <button type="button" class="btn btn-primary btn-lg" data-toggle="modal" data-target="#testModal"> <!-- If you want something to launch a modal, you need to add a data-toggle and data-target attribute as shown in this example. The data-target must match the id of the modal you created -->
                        Show Test Modal
                    </button>
                </div>
            </div>

            <div class="mt-6"></div> <!-- Used for spacing between sections  -->
            <!-- Toast section  -->
            <!-- Heading  -->
            <h2 class="section-heading">Test Toast Heading</h2>
            <div class="mt-4"></div> <!-- Used for spacing between section heading and content  -->
            <!-- Content  -->
            <div id="table-card" class="card mt-3"> <!-- Put interactible elements in a card, enclosed with card-body  -->
                <div class="card-body">
                    <button type="button" id="successToastBtn" class="btn btn-success btn-lg">
                        Add Success Toast
                    </button>
                    <button type="button" id="dangerToastBtn" class="btn btn-danger btn-lg">
                        Add Danger Toast
                    </button>
                </div>
            </div>
        </main>

        <!-- Modal section -->
        <!-- This part will not be shown to the user until they click on the button that is supposed to launch the modal -->
        <!-- The modal should have the same id as the one you specified in the element with the data-target above -->
        <!-- Note that you can use multiple modals in one page, as long as they are all given different ids -->
        <div class="modal fade" id="testModal" tabindex="-1" role="dialog" aria-labelledby="testModal" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <!-- This is where you enter the title of the modal -->
                    <div class="modal-header">
                        <h4 class="modal-title text-primary" id="testModalLabel">Test Modal Title</h4>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <!-- This is the actual content (can put anything here) -->
                    <div class="modal-body">
                        <div class="card input-card"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="textModalInput1" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle text-secondary font-weight-normal">Example Text Box</small> <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <input id="textModalInput1" class="form-control card-input" type="text" placeholder="This is an example text box woo"> <!-- This is where the user actually inputs all their stuff  -->
                            </div>
                        </div>
                        <div class="card input-card mt-3"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="textModalInput2" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle text-secondary font-weight-normal">Example Text Box</small> <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <input id="textModalInput2" class="form-control card-input" type="text" placeholder="This is an example text box woo"> <!-- This is where the user actually inputs all their stuff  -->
                            </div>
                        </div>
                    </div>
                    <!-- This is the footer, where you usually put buttons and stuff -->
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary btn-lg w-100">Save changes</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>

<script>
    $(document).ready(async function() {
        try {
            await callTestApi();
        } catch (err) {
            handleError(err);
        }

        // This whole part initialises the seat chart
        let sc = $('#seat-map').seatCharts({ 
            // This map is created from the seat characters defined in the seats section below
            // Also the underscores represent empty spaces
            // NOTE that the number columns must be same across all rows, otherwise the chart will break. Enter empty spaces (underscore) if you want to leave empty space
            map: [ 
                '________________________________________',
                '___GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG___',
                '__GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG__',
                '_GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG_',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGG______________GGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'HGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGH',
                'HGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGH',
                'HGGGGGGGGGGGG______________GGGGGGGGGGGGH',
                'HGGGGGGGGGGGG______________GGGGGGGGGGGGH',
                'HGGGGGGGGGGGG______________GGGGGGGGGGGGH',
                // '____GGGGGGGGGGG____',
                // '___GGGGGGGGGGGGG___',
                // '__GGGGGGGGGGGGGGG__',
                // '_GGGGGGGGGGGGGGGGG_',
                // 'GGGGGGGGGGGGGGGGGGG',
                // 'GGGGGGG______GGGGGG',
                // 'GGGGGGGGGGGGGGGGGGG', // Used for testing
            ],
            // This section just defines all the different seat types
            // Each seat type must contain a SINGLE character to identify it in places like the seat-chart above
            // They should also contain the css class to use for the type (contained under the seat type section of style.css) and a user-readable category
            // Each seat can also contain other data like price or whatever
            // FYI, seats also have statuses that we can define. So far we have five statuses: available, reserved (planner can edit), blocked (planner cannot edit), selected (currently selected seats), highlighted. We can add other statuses by adding its CSS classes to the seat statuses section of the style.css
            // We can't define each seats' status here, cause we have to wait till the seat charts fully initialised to do that
            seats: {
                // Uppercase character seat types represent seat types that will be present for all events
                'G': { // This is the seat character that we can use in the seat chart to identify the seat type
                    classes : 'general', // This is the CSS class associated with the seat type (contained under the seat type section of style.css)
                    category: 'General' // This is the user-readable category of the seat type
                },
                'H': {
                    classes : 'handicapped',
                    category: 'Handicapped'
                },
                // For dynamic seat types, we'll just use lowercase alphabets for their charcters and classes
                'a': {
                    classes : 'a',
                    category: 'Award Winners (Blocked)'
                },
                'b': {
                    classes : 'b',
                    category: 'DIT DWM (Blocked)'
                },
                'c': {
                    classes : 'c',
                    category: 'DSF DWM (Blocked)'
                },
                'd': {
                    classes : 'd',
                    category: 'DCS DWM (Blocked)'
                },
                'e': {
                    classes : 'e',
                    category: 'DIT Graduates (Blocked)'
                },
                'f': {
                    classes : 'f',
                    category: 'DSF Graduates (Blocked)'
                },
                'g': {
                    classes : 'g',
                    category: 'DEI/DCS Graduates (Blocked)'
                },
                'h': {
                    classes : 'h',
                    category: 'Late Comers (Blocked)'
                },
                'i': {
                    classes : 'i',
                    category: 'Guests of AW (Blocked)'
                },
                'j': {
                    classes : 'j',
                    category: 'VIP (Blocked)'
                },
                'k': {
                    classes : 'k',
                    category: 'Industrial Guests (Blocked)'
                },
                'l': {
                    classes : 'l',
                    category: 'Previous Alumni (Blocked)'
                },
            },
            // This section just contains how we define our rows, columns, seat label, seat id, etc
            naming : {
                rows: ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','AA','BB','CC','DD','EE', 'FF','GG','HH','JJ','KK','LL','MM','NN'], // This array is used to define how we name our rows from top-to-bottom
                // columns: [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], // This array is used to define how we name our columns from left-to-right. Don't need to mess around with this for now.
                // These two functions below just define how we name our labels and ids respectively
                // Both just use the row:column format (eg: E:19)
                getLabel : function (character, row, column) {
                    return row + ':' + column;
                },
                getId : function (character, row, column) {
                    return row + ':' + column;
                },
            },
            // This section defines how we wanna present the legend of the seat chart
            legend : {
                node : $('#legend'), // This is the element the legend attaches itself to
                // These are the seat legends we wanna present to the user
                // Not every seat type and its different statuses has to be here, just the essential
                items : [
                    [ 'G', 'available', 'General'], // Each legend contains the character of the seat type we wanna present, the status of the seat type (so far we have five statuses: available, reserved (planner can edit), blocked (planner cannot edit), selected (currently selected seats), highlighted), and a user readable label
                    [ 'H', 'available', 'Handicapped'],
                    [ 'G', 'reserved', 'Reserved'],
                    [ 'G', 'blocked', 'Blocked'],
                    // [ 'a', 'available', 'Award Winners (Blocked)'],
                    // [ 'b', 'blocked', 'DIT DWM (Blocked)'],
                    // [ 'c', 'blocked', 'DSF DWM (Blocked)'],
                    // [ 'd', 'blocked', 'DCS DWM (Blocked)'],
                    // [ 'e', 'blocked', 'DIT Graduates (Blocked)'],
                    // [ 'f', 'blocked', 'DSF Graduates (Blocked)'],
                    // [ 'g', 'blocked', 'DEI/DCS Graduates (Blocked)'],
                    // [ 'h', 'blocked', 'Late Comers (Blocked)'],
                    // [ 'i', 'blocked', 'Guests of AW (Blocked)'],
                    // [ 'j', 'blocked', 'VIP (Blocked)'],
                    // [ 'k', 'blocked', 'Industrial Guests (Blocked)'],
                    // [ 'l', 'blocked', 'Previous Alumni (Blocked)'],
                ]					
            },
            // This section defines what happens when the user clicks on a seat
            // We have to define what happens according to the clicked seat's status
            click: function () {
                if (this.status() === 'available') {
                    return 'selected';
                } else if (this.status() === 'selected') {
                    return 'available';
                } else if (this.status() === 'reserved') {
                    return 'reserved';
                } else {
                    return this.style();
                }
            }
        });
        
        // This is the part where we actually set the seat's status individually
        // Note that I'm using regex here to set the seat status on a large scale but in the actual app, we probably have to do a for-loop on all the seats and set their status individually
        sc.find('available').status('blocked');
        sc.find(/^[E-J]:[0-9]+/).status('available');
        sc.find(/^[K-N]:[0-9]+/).status('reserved');
        sc.find(/^[K-N]:(1[4-9]|2[0-7])+/).status('blocked');
        sc.find(/^[T-V]:(1[4-9]|2[0-7])+/).status('reserved');
        sc.find(/^[W-Y]:(1[4-9]|[23][0-9]|40)+/).status('reserved');
        sc.find(/^[Z]:[0-9]+/).status('reserved');
        sc.find(/^AA:[0-9]+/).status('reserved');
        sc.find(/^BB:[0-9]+/).status('reserved');
        sc.find(/^CC:[0-9]+/).status('reserved');
        sc.find(/^DD:[0-9]+/).status('reserved');
        sc.get("DD:1").status('available');

        console.log(sc);

        scaleContentWidth($('#table-wrapper'), $('#seat-map')); // This function is used to scale the entire seat chart to fit within the card's dimensions when the seat chart is first created
    });

    $(window).on('resize', function() { // Upon resizing the browser window, the scaling function is called to make sure the seat chart fits within the new dimensions of the parent container
        scaleContentWidth($('#table-wrapper'), $('#seat-map'));
    });
    
    // These are example notification objects. The real app will have more attributes in them but this is enough for now.
    // Even if we just have one notification object, we need to put them in an array cause the template iterates through an array of notifications and adds each one individually
    // const successNotification = { message: "This is a success toast! Yay!", type: "success" };
    // const dangerNotification = { message: "This is a danger toast! Boo!", type: "danger" };

    $("#successToastBtn").click(function () {
        showSuccessToast("This is a success toast! Yay!"); // showToasts is defined in script.js
    });

    $("#dangerToastBtn").click(function () {
        showDangerToast("This is a danger toast! Boo!"); // showToasts is defined in script.js
    });

</script>

<%- include('../templates/footer')-%>